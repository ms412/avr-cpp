
cpp002.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  00001b4a  00001bde  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b4a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003c  0080011a  0080011a  00001bf8  2**0
                  ALLOC
  3 .stab         00001adc  00000000  00000000  00001bf8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f56  00000000  00000000  000036d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000462a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000476a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000048da  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00006523  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000740e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000081bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028e  00000000  00000000  0000831c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  000085aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00008d78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4c 00 	jmp	0x98	; 0x98 <__ctors_end>
       4:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
       8:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
       c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      10:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      14:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      18:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      1c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      20:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      24:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      28:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      2c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      30:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      34:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      38:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      3c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      40:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      44:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      48:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      4c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      50:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      54:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__vector_21>
      58:	0c 94 c4 02 	jmp	0x588	; 0x588 <__vector_22>
      5c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      60:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      64:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      68:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      6c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      70:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      74:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      78:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      7c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      80:	0c 94 f9 04 	jmp	0x9f2	; 0x9f2 <__vector_32>
      84:	0c 94 ae 05 	jmp	0xb5c	; 0xb5c <__vector_33>
      88:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      8c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      90:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>

00000094 <__ctors_start>:
      94:	55 03       	mulsu	r21, r21
      96:	3f 06       	cpc	r3, r31

00000098 <__ctors_end>:
      98:	11 24       	eor	r1, r1
      9a:	1f be       	out	0x3f, r1	; 63
      9c:	cf ef       	ldi	r28, 0xFF	; 255
      9e:	d0 e1       	ldi	r29, 0x10	; 16
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
      a4:	11 e0       	ldi	r17, 0x01	; 1
      a6:	a0 e0       	ldi	r26, 0x00	; 0
      a8:	b1 e0       	ldi	r27, 0x01	; 1
      aa:	ea e4       	ldi	r30, 0x4A	; 74
      ac:	fb e1       	ldi	r31, 0x1B	; 27
      ae:	00 e0       	ldi	r16, 0x00	; 0
      b0:	0b bf       	out	0x3b, r16	; 59
      b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
      b4:	07 90       	elpm	r0, Z+
      b6:	0d 92       	st	X+, r0
      b8:	aa 31       	cpi	r26, 0x1A	; 26
      ba:	b1 07       	cpc	r27, r17
      bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
      be:	11 e0       	ldi	r17, 0x01	; 1
      c0:	aa e1       	ldi	r26, 0x1A	; 26
      c2:	b1 e0       	ldi	r27, 0x01	; 1
      c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
      c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
      c8:	a6 35       	cpi	r26, 0x56	; 86
      ca:	b1 07       	cpc	r27, r17
      cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>

000000ce <__do_global_ctors>:
      ce:	10 e0       	ldi	r17, 0x00	; 0
      d0:	c8 e9       	ldi	r28, 0x98	; 152
      d2:	d0 e0       	ldi	r29, 0x00	; 0
      d4:	04 c0       	rjmp	.+8      	; 0xde <.do_global_ctors_start>

000000d6 <.do_global_ctors_loop>:
      d6:	22 97       	sbiw	r28, 0x02	; 2
      d8:	fe 01       	movw	r30, r28
      da:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <__tablejump__>

000000de <.do_global_ctors_start>:
      de:	c4 39       	cpi	r28, 0x94	; 148
      e0:	d1 07       	cpc	r29, r17
      e2:	c9 f7       	brne	.-14     	; 0xd6 <.do_global_ctors_loop>
      e4:	0e 94 af 06 	call	0xd5e	; 0xd5e <main>
      e8:	0c 94 a3 0d 	jmp	0x1b46	; 0x1b46 <_exit>

000000ec <__bad_interrupt>:
      ec:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f0 <_ZN5Uart011SetBaudRateEm>:
      f0:	0f 93       	push	r16
      f2:	1f 93       	push	r17
      f4:	df 93       	push	r29
      f6:	cf 93       	push	r28
      f8:	00 d0       	rcall	.+0      	; 0xfa <_ZN5Uart011SetBaudRateEm+0xa>
      fa:	00 d0       	rcall	.+0      	; 0xfc <_ZN5Uart011SetBaudRateEm+0xc>
      fc:	00 d0       	rcall	.+0      	; 0xfe <_ZN5Uart011SetBaudRateEm+0xe>
      fe:	cd b7       	in	r28, 0x3d	; 61
     100:	de b7       	in	r29, 0x3e	; 62
     102:	9a 83       	std	Y+2, r25	; 0x02
     104:	89 83       	std	Y+1, r24	; 0x01
     106:	4b 83       	std	Y+3, r20	; 0x03
     108:	5c 83       	std	Y+4, r21	; 0x04
     10a:	6d 83       	std	Y+5, r22	; 0x05
     10c:	7e 83       	std	Y+6, r23	; 0x06
     10e:	05 ec       	ldi	r16, 0xC5	; 197
     110:	10 e0       	ldi	r17, 0x00	; 0
     112:	8b 81       	ldd	r24, Y+3	; 0x03
     114:	9c 81       	ldd	r25, Y+4	; 0x04
     116:	ad 81       	ldd	r26, Y+5	; 0x05
     118:	be 81       	ldd	r27, Y+6	; 0x06
     11a:	88 0f       	add	r24, r24
     11c:	99 1f       	adc	r25, r25
     11e:	aa 1f       	adc	r26, r26
     120:	bb 1f       	adc	r27, r27
     122:	88 0f       	add	r24, r24
     124:	99 1f       	adc	r25, r25
     126:	aa 1f       	adc	r26, r26
     128:	bb 1f       	adc	r27, r27
     12a:	88 0f       	add	r24, r24
     12c:	99 1f       	adc	r25, r25
     12e:	aa 1f       	adc	r26, r26
     130:	bb 1f       	adc	r27, r27
     132:	9c 01       	movw	r18, r24
     134:	ad 01       	movw	r20, r26
     136:	80 e0       	ldi	r24, 0x00	; 0
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	a1 ee       	ldi	r26, 0xE1	; 225
     13c:	b0 e0       	ldi	r27, 0x00	; 0
     13e:	bc 01       	movw	r22, r24
     140:	cd 01       	movw	r24, r26
     142:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <__udivmodsi4>
     146:	da 01       	movw	r26, r20
     148:	c9 01       	movw	r24, r18
     14a:	01 97       	sbiw	r24, 0x01	; 1
     14c:	a1 09       	sbc	r26, r1
     14e:	b1 09       	sbc	r27, r1
     150:	89 2f       	mov	r24, r25
     152:	9a 2f       	mov	r25, r26
     154:	ab 2f       	mov	r26, r27
     156:	bb 27       	eor	r27, r27
     158:	f8 01       	movw	r30, r16
     15a:	80 83       	st	Z, r24
     15c:	04 ec       	ldi	r16, 0xC4	; 196
     15e:	10 e0       	ldi	r17, 0x00	; 0
     160:	8b 81       	ldd	r24, Y+3	; 0x03
     162:	9c 81       	ldd	r25, Y+4	; 0x04
     164:	ad 81       	ldd	r26, Y+5	; 0x05
     166:	be 81       	ldd	r27, Y+6	; 0x06
     168:	88 0f       	add	r24, r24
     16a:	99 1f       	adc	r25, r25
     16c:	aa 1f       	adc	r26, r26
     16e:	bb 1f       	adc	r27, r27
     170:	88 0f       	add	r24, r24
     172:	99 1f       	adc	r25, r25
     174:	aa 1f       	adc	r26, r26
     176:	bb 1f       	adc	r27, r27
     178:	88 0f       	add	r24, r24
     17a:	99 1f       	adc	r25, r25
     17c:	aa 1f       	adc	r26, r26
     17e:	bb 1f       	adc	r27, r27
     180:	9c 01       	movw	r18, r24
     182:	ad 01       	movw	r20, r26
     184:	80 e0       	ldi	r24, 0x00	; 0
     186:	90 e0       	ldi	r25, 0x00	; 0
     188:	a1 ee       	ldi	r26, 0xE1	; 225
     18a:	b0 e0       	ldi	r27, 0x00	; 0
     18c:	bc 01       	movw	r22, r24
     18e:	cd 01       	movw	r24, r26
     190:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <__udivmodsi4>
     194:	da 01       	movw	r26, r20
     196:	c9 01       	movw	r24, r18
     198:	81 50       	subi	r24, 0x01	; 1
     19a:	f8 01       	movw	r30, r16
     19c:	80 83       	st	Z, r24
     19e:	e0 ec       	ldi	r30, 0xC0	; 192
     1a0:	f0 e0       	ldi	r31, 0x00	; 0
     1a2:	82 e0       	ldi	r24, 0x02	; 2
     1a4:	80 83       	st	Z, r24
     1a6:	e1 ec       	ldi	r30, 0xC1	; 193
     1a8:	f0 e0       	ldi	r31, 0x00	; 0
     1aa:	88 e1       	ldi	r24, 0x18	; 24
     1ac:	80 83       	st	Z, r24
     1ae:	e2 ec       	ldi	r30, 0xC2	; 194
     1b0:	f0 e0       	ldi	r31, 0x00	; 0
     1b2:	86 e0       	ldi	r24, 0x06	; 6
     1b4:	80 83       	st	Z, r24
     1b6:	a1 ec       	ldi	r26, 0xC1	; 193
     1b8:	b0 e0       	ldi	r27, 0x00	; 0
     1ba:	e1 ec       	ldi	r30, 0xC1	; 193
     1bc:	f0 e0       	ldi	r31, 0x00	; 0
     1be:	80 81       	ld	r24, Z
     1c0:	88 69       	ori	r24, 0x98	; 152
     1c2:	8c 93       	st	X, r24
     1c4:	26 96       	adiw	r28, 0x06	; 6
     1c6:	0f b6       	in	r0, 0x3f	; 63
     1c8:	f8 94       	cli
     1ca:	de bf       	out	0x3e, r29	; 62
     1cc:	0f be       	out	0x3f, r0	; 63
     1ce:	cd bf       	out	0x3d, r28	; 61
     1d0:	cf 91       	pop	r28
     1d2:	df 91       	pop	r29
     1d4:	1f 91       	pop	r17
     1d6:	0f 91       	pop	r16
     1d8:	08 95       	ret

000001da <_ZN5Uart0C2Em>:
//#if defined USART0_UDRE_vect

static CBuffer<uint8_t,10> TxBuffer;
static CBuffer<uint8_t,10> RxBuffer;

Uart0::Uart0(uint32_t baudrate){
     1da:	df 93       	push	r29
     1dc:	cf 93       	push	r28
     1de:	00 d0       	rcall	.+0      	; 0x1e0 <_ZN5Uart0C2Em+0x6>
     1e0:	00 d0       	rcall	.+0      	; 0x1e2 <_ZN5Uart0C2Em+0x8>
     1e2:	00 d0       	rcall	.+0      	; 0x1e4 <_ZN5Uart0C2Em+0xa>
     1e4:	cd b7       	in	r28, 0x3d	; 61
     1e6:	de b7       	in	r29, 0x3e	; 62
     1e8:	9a 83       	std	Y+2, r25	; 0x02
     1ea:	89 83       	std	Y+1, r24	; 0x01
     1ec:	4b 83       	std	Y+3, r20	; 0x03
     1ee:	5c 83       	std	Y+4, r21	; 0x04
     1f0:	6d 83       	std	Y+5, r22	; 0x05
     1f2:	7e 83       	std	Y+6, r23	; 0x06
	SetBaudRate(baudrate);
     1f4:	89 81       	ldd	r24, Y+1	; 0x01
     1f6:	9a 81       	ldd	r25, Y+2	; 0x02
     1f8:	2b 81       	ldd	r18, Y+3	; 0x03
     1fa:	3c 81       	ldd	r19, Y+4	; 0x04
     1fc:	4d 81       	ldd	r20, Y+5	; 0x05
     1fe:	5e 81       	ldd	r21, Y+6	; 0x06
     200:	ba 01       	movw	r22, r20
     202:	a9 01       	movw	r20, r18
     204:	0e 94 78 00 	call	0xf0	; 0xf0 <_ZN5Uart011SetBaudRateEm>
	m_txByte = 0;
     208:	e9 81       	ldd	r30, Y+1	; 0x01
     20a:	fa 81       	ldd	r31, Y+2	; 0x02
     20c:	11 82       	std	Z+1, r1	; 0x01
     20e:	10 82       	st	Z, r1
	m_rxByte = 0;
     210:	e9 81       	ldd	r30, Y+1	; 0x01
     212:	fa 81       	ldd	r31, Y+2	; 0x02
     214:	13 82       	std	Z+3, r1	; 0x03
     216:	12 82       	std	Z+2, r1	; 0x02
	m_error =0;
     218:	e9 81       	ldd	r30, Y+1	; 0x01
     21a:	fa 81       	ldd	r31, Y+2	; 0x02
     21c:	15 82       	std	Z+5, r1	; 0x05
     21e:	14 82       	std	Z+4, r1	; 0x04
}
     220:	26 96       	adiw	r28, 0x06	; 6
     222:	0f b6       	in	r0, 0x3f	; 63
     224:	f8 94       	cli
     226:	de bf       	out	0x3e, r29	; 62
     228:	0f be       	out	0x3f, r0	; 63
     22a:	cd bf       	out	0x3d, r28	; 61
     22c:	cf 91       	pop	r28
     22e:	df 91       	pop	r29
     230:	08 95       	ret

00000232 <_ZN5Uart0C1Em>:
//#if defined USART0_UDRE_vect

static CBuffer<uint8_t,10> TxBuffer;
static CBuffer<uint8_t,10> RxBuffer;

Uart0::Uart0(uint32_t baudrate){
     232:	df 93       	push	r29
     234:	cf 93       	push	r28
     236:	00 d0       	rcall	.+0      	; 0x238 <_ZN5Uart0C1Em+0x6>
     238:	00 d0       	rcall	.+0      	; 0x23a <_ZN5Uart0C1Em+0x8>
     23a:	00 d0       	rcall	.+0      	; 0x23c <_ZN5Uart0C1Em+0xa>
     23c:	cd b7       	in	r28, 0x3d	; 61
     23e:	de b7       	in	r29, 0x3e	; 62
     240:	9a 83       	std	Y+2, r25	; 0x02
     242:	89 83       	std	Y+1, r24	; 0x01
     244:	4b 83       	std	Y+3, r20	; 0x03
     246:	5c 83       	std	Y+4, r21	; 0x04
     248:	6d 83       	std	Y+5, r22	; 0x05
     24a:	7e 83       	std	Y+6, r23	; 0x06
	SetBaudRate(baudrate);
     24c:	89 81       	ldd	r24, Y+1	; 0x01
     24e:	9a 81       	ldd	r25, Y+2	; 0x02
     250:	2b 81       	ldd	r18, Y+3	; 0x03
     252:	3c 81       	ldd	r19, Y+4	; 0x04
     254:	4d 81       	ldd	r20, Y+5	; 0x05
     256:	5e 81       	ldd	r21, Y+6	; 0x06
     258:	ba 01       	movw	r22, r20
     25a:	a9 01       	movw	r20, r18
     25c:	0e 94 78 00 	call	0xf0	; 0xf0 <_ZN5Uart011SetBaudRateEm>
	m_txByte = 0;
     260:	e9 81       	ldd	r30, Y+1	; 0x01
     262:	fa 81       	ldd	r31, Y+2	; 0x02
     264:	11 82       	std	Z+1, r1	; 0x01
     266:	10 82       	st	Z, r1
	m_rxByte = 0;
     268:	e9 81       	ldd	r30, Y+1	; 0x01
     26a:	fa 81       	ldd	r31, Y+2	; 0x02
     26c:	13 82       	std	Z+3, r1	; 0x03
     26e:	12 82       	std	Z+2, r1	; 0x02
	m_error =0;
     270:	e9 81       	ldd	r30, Y+1	; 0x01
     272:	fa 81       	ldd	r31, Y+2	; 0x02
     274:	15 82       	std	Z+5, r1	; 0x05
     276:	14 82       	std	Z+4, r1	; 0x04
}
     278:	26 96       	adiw	r28, 0x06	; 6
     27a:	0f b6       	in	r0, 0x3f	; 63
     27c:	f8 94       	cli
     27e:	de bf       	out	0x3e, r29	; 62
     280:	0f be       	out	0x3f, r0	; 63
     282:	cd bf       	out	0x3d, r28	; 61
     284:	cf 91       	pop	r28
     286:	df 91       	pop	r29
     288:	08 95       	ret

0000028a <_ZN5Uart010GetIntStatERj>:

		return true;
	}
}

void Uart0::GetIntStat(uint16_t &c){
     28a:	df 93       	push	r29
     28c:	cf 93       	push	r28
     28e:	00 d0       	rcall	.+0      	; 0x290 <_ZN5Uart010GetIntStatERj+0x6>
     290:	00 d0       	rcall	.+0      	; 0x292 <_ZN5Uart010GetIntStatERj+0x8>
     292:	cd b7       	in	r28, 0x3d	; 61
     294:	de b7       	in	r29, 0x3e	; 62
     296:	9a 83       	std	Y+2, r25	; 0x02
     298:	89 83       	std	Y+1, r24	; 0x01
     29a:	7c 83       	std	Y+4, r23	; 0x04
     29c:	6b 83       	std	Y+3, r22	; 0x03
	c= m_txByte;
     29e:	e9 81       	ldd	r30, Y+1	; 0x01
     2a0:	fa 81       	ldd	r31, Y+2	; 0x02
     2a2:	80 81       	ld	r24, Z
     2a4:	91 81       	ldd	r25, Z+1	; 0x01
     2a6:	eb 81       	ldd	r30, Y+3	; 0x03
     2a8:	fc 81       	ldd	r31, Y+4	; 0x04
     2aa:	91 83       	std	Z+1, r25	; 0x01
     2ac:	80 83       	st	Z, r24
}
     2ae:	0f 90       	pop	r0
     2b0:	0f 90       	pop	r0
     2b2:	0f 90       	pop	r0
     2b4:	0f 90       	pop	r0
     2b6:	cf 91       	pop	r28
     2b8:	df 91       	pop	r29
     2ba:	08 95       	ret

000002bc <_ZN7CBufferIhLi10EEC1Ev>:
static CBuffer<uint8_t,10> TxBuffer;
static CBuffer<uint8_t,10> RxBuffer;

Uart1::Uart1(uint32_t baudrate){
	SetBaudRate(baudrate);
	m_txByte = 0;
     2bc:	df 93       	push	r29
     2be:	cf 93       	push	r28
     2c0:	00 d0       	rcall	.+0      	; 0x2c2 <_ZN7CBufferIhLi10EEC1Ev+0x6>
     2c2:	cd b7       	in	r28, 0x3d	; 61
     2c4:	de b7       	in	r29, 0x3e	; 62
     2c6:	9a 83       	std	Y+2, r25	; 0x02
     2c8:	89 83       	std	Y+1, r24	; 0x01
     2ca:	e9 81       	ldd	r30, Y+1	; 0x01
     2cc:	fa 81       	ldd	r31, Y+2	; 0x02
     2ce:	14 86       	std	Z+12, r1	; 0x0c
     2d0:	13 86       	std	Z+11, r1	; 0x0b
     2d2:	e9 81       	ldd	r30, Y+1	; 0x01
     2d4:	fa 81       	ldd	r31, Y+2	; 0x02
     2d6:	16 86       	std	Z+14, r1	; 0x0e
     2d8:	15 86       	std	Z+13, r1	; 0x0d
     2da:	0f 90       	pop	r0
     2dc:	0f 90       	pop	r0
     2de:	cf 91       	pop	r28
     2e0:	df 91       	pop	r29
     2e2:	08 95       	ret

000002e4 <_ZN7CBufferIhLi10EE7isEmptyEv>:
{
public:
	//Constructor
	CBuffer(): m_put(0), m_get(0) {}

	bool isEmpty() {return (m_put == m_get);}
     2e4:	df 93       	push	r29
     2e6:	cf 93       	push	r28
     2e8:	00 d0       	rcall	.+0      	; 0x2ea <_ZN7CBufferIhLi10EE7isEmptyEv+0x6>
     2ea:	0f 92       	push	r0
     2ec:	cd b7       	in	r28, 0x3d	; 61
     2ee:	de b7       	in	r29, 0x3e	; 62
     2f0:	9a 83       	std	Y+2, r25	; 0x02
     2f2:	89 83       	std	Y+1, r24	; 0x01
     2f4:	e9 81       	ldd	r30, Y+1	; 0x01
     2f6:	fa 81       	ldd	r31, Y+2	; 0x02
     2f8:	23 85       	ldd	r18, Z+11	; 0x0b
     2fa:	34 85       	ldd	r19, Z+12	; 0x0c
     2fc:	e9 81       	ldd	r30, Y+1	; 0x01
     2fe:	fa 81       	ldd	r31, Y+2	; 0x02
     300:	85 85       	ldd	r24, Z+13	; 0x0d
     302:	96 85       	ldd	r25, Z+14	; 0x0e
     304:	1b 82       	std	Y+3, r1	; 0x03
     306:	28 17       	cp	r18, r24
     308:	39 07       	cpc	r19, r25
     30a:	11 f4       	brne	.+4      	; 0x310 <_ZN7CBufferIhLi10EE7isEmptyEv+0x2c>
     30c:	81 e0       	ldi	r24, 0x01	; 1
     30e:	8b 83       	std	Y+3, r24	; 0x03
     310:	8b 81       	ldd	r24, Y+3	; 0x03
     312:	0f 90       	pop	r0
     314:	0f 90       	pop	r0
     316:	0f 90       	pop	r0
     318:	cf 91       	pop	r28
     31a:	df 91       	pop	r29
     31c:	08 95       	ret

0000031e <_ZN7CBufferIhLi10EE3IncERi>:
	}

private:
	CBufferType m_Slots[BufferSize+1];
	int m_put, m_get;
	void Inc (int & Pos) {Pos = (Pos+1)%(BufferSize+1);}
     31e:	df 93       	push	r29
     320:	cf 93       	push	r28
     322:	00 d0       	rcall	.+0      	; 0x324 <_ZN7CBufferIhLi10EE3IncERi+0x6>
     324:	00 d0       	rcall	.+0      	; 0x326 <_ZN7CBufferIhLi10EE3IncERi+0x8>
     326:	cd b7       	in	r28, 0x3d	; 61
     328:	de b7       	in	r29, 0x3e	; 62
     32a:	9a 83       	std	Y+2, r25	; 0x02
     32c:	89 83       	std	Y+1, r24	; 0x01
     32e:	7c 83       	std	Y+4, r23	; 0x04
     330:	6b 83       	std	Y+3, r22	; 0x03
     332:	eb 81       	ldd	r30, Y+3	; 0x03
     334:	fc 81       	ldd	r31, Y+4	; 0x04
     336:	80 81       	ld	r24, Z
     338:	91 81       	ldd	r25, Z+1	; 0x01
     33a:	01 96       	adiw	r24, 0x01	; 1
     33c:	2b e0       	ldi	r18, 0x0B	; 11
     33e:	30 e0       	ldi	r19, 0x00	; 0
     340:	b9 01       	movw	r22, r18
     342:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <__divmodhi4>
     346:	eb 81       	ldd	r30, Y+3	; 0x03
     348:	fc 81       	ldd	r31, Y+4	; 0x04
     34a:	91 83       	std	Z+1, r25	; 0x01
     34c:	80 83       	st	Z, r24
     34e:	0f 90       	pop	r0
     350:	0f 90       	pop	r0
     352:	0f 90       	pop	r0
     354:	0f 90       	pop	r0
     356:	cf 91       	pop	r28
     358:	df 91       	pop	r29
     35a:	08 95       	ret

0000035c <_ZN7CBufferIhLi10EE6isFullEv>:
public:
	//Constructor
	CBuffer(): m_put(0), m_get(0) {}

	bool isEmpty() {return (m_put == m_get);}
	bool isFull(){
     35c:	df 93       	push	r29
     35e:	cf 93       	push	r28
     360:	00 d0       	rcall	.+0      	; 0x362 <_ZN7CBufferIhLi10EE6isFullEv+0x6>
     362:	00 d0       	rcall	.+0      	; 0x364 <_ZN7CBufferIhLi10EE6isFullEv+0x8>
     364:	0f 92       	push	r0
     366:	cd b7       	in	r28, 0x3d	; 61
     368:	de b7       	in	r29, 0x3e	; 62
     36a:	9c 83       	std	Y+4, r25	; 0x04
     36c:	8b 83       	std	Y+3, r24	; 0x03
		int temp = m_put;
     36e:	eb 81       	ldd	r30, Y+3	; 0x03
     370:	fc 81       	ldd	r31, Y+4	; 0x04
     372:	83 85       	ldd	r24, Z+11	; 0x0b
     374:	94 85       	ldd	r25, Z+12	; 0x0c
     376:	9a 83       	std	Y+2, r25	; 0x02
     378:	89 83       	std	Y+1, r24	; 0x01
		Inc(temp);
     37a:	8b 81       	ldd	r24, Y+3	; 0x03
     37c:	9c 81       	ldd	r25, Y+4	; 0x04
     37e:	9e 01       	movw	r18, r28
     380:	2f 5f       	subi	r18, 0xFF	; 255
     382:	3f 4f       	sbci	r19, 0xFF	; 255
     384:	b9 01       	movw	r22, r18
     386:	0e 94 8f 01 	call	0x31e	; 0x31e <_ZN7CBufferIhLi10EE3IncERi>
		return temp == m_get;
     38a:	eb 81       	ldd	r30, Y+3	; 0x03
     38c:	fc 81       	ldd	r31, Y+4	; 0x04
     38e:	25 85       	ldd	r18, Z+13	; 0x0d
     390:	36 85       	ldd	r19, Z+14	; 0x0e
     392:	89 81       	ldd	r24, Y+1	; 0x01
     394:	9a 81       	ldd	r25, Y+2	; 0x02
     396:	1d 82       	std	Y+5, r1	; 0x05
     398:	28 17       	cp	r18, r24
     39a:	39 07       	cpc	r19, r25
     39c:	11 f4       	brne	.+4      	; 0x3a2 <_ZN7CBufferIhLi10EE6isFullEv+0x46>
     39e:	81 e0       	ldi	r24, 0x01	; 1
     3a0:	8d 83       	std	Y+5, r24	; 0x05
     3a2:	8d 81       	ldd	r24, Y+5	; 0x05
	}
     3a4:	0f 90       	pop	r0
     3a6:	0f 90       	pop	r0
     3a8:	0f 90       	pop	r0
     3aa:	0f 90       	pop	r0
     3ac:	0f 90       	pop	r0
     3ae:	cf 91       	pop	r28
     3b0:	df 91       	pop	r29
     3b2:	08 95       	ret

000003b4 <_ZN7CBufferIhLi10EE3PutERKh>:
		Slot = m_Slots[m_get];
		Inc(m_get);
		return true;
	}

	bool Put(const CBufferType &Slot){
     3b4:	df 93       	push	r29
     3b6:	cf 93       	push	r28
     3b8:	00 d0       	rcall	.+0      	; 0x3ba <_ZN7CBufferIhLi10EE3PutERKh+0x6>
     3ba:	00 d0       	rcall	.+0      	; 0x3bc <_ZN7CBufferIhLi10EE3PutERKh+0x8>
     3bc:	0f 92       	push	r0
     3be:	cd b7       	in	r28, 0x3d	; 61
     3c0:	de b7       	in	r29, 0x3e	; 62
     3c2:	9a 83       	std	Y+2, r25	; 0x02
     3c4:	89 83       	std	Y+1, r24	; 0x01
     3c6:	7c 83       	std	Y+4, r23	; 0x04
     3c8:	6b 83       	std	Y+3, r22	; 0x03
		if (isFull())
     3ca:	89 81       	ldd	r24, Y+1	; 0x01
     3cc:	9a 81       	ldd	r25, Y+2	; 0x02
     3ce:	0e 94 ae 01 	call	0x35c	; 0x35c <_ZN7CBufferIhLi10EE6isFullEv>
     3d2:	88 23       	and	r24, r24
     3d4:	11 f0       	breq	.+4      	; 0x3da <_ZN7CBufferIhLi10EE3PutERKh+0x26>
			return false;
     3d6:	1d 82       	std	Y+5, r1	; 0x05
     3d8:	19 c0       	rjmp	.+50     	; 0x40c <_ZN7CBufferIhLi10EE3PutERKh+0x58>
		m_Slots[m_put] = Slot;
     3da:	e9 81       	ldd	r30, Y+1	; 0x01
     3dc:	fa 81       	ldd	r31, Y+2	; 0x02
     3de:	23 85       	ldd	r18, Z+11	; 0x0b
     3e0:	34 85       	ldd	r19, Z+12	; 0x0c
     3e2:	eb 81       	ldd	r30, Y+3	; 0x03
     3e4:	fc 81       	ldd	r31, Y+4	; 0x04
     3e6:	40 81       	ld	r20, Z
     3e8:	89 81       	ldd	r24, Y+1	; 0x01
     3ea:	9a 81       	ldd	r25, Y+2	; 0x02
     3ec:	fc 01       	movw	r30, r24
     3ee:	e2 0f       	add	r30, r18
     3f0:	f3 1f       	adc	r31, r19
     3f2:	40 83       	st	Z, r20
		Inc(m_put);
     3f4:	89 81       	ldd	r24, Y+1	; 0x01
     3f6:	9a 81       	ldd	r25, Y+2	; 0x02
     3f8:	9c 01       	movw	r18, r24
     3fa:	25 5f       	subi	r18, 0xF5	; 245
     3fc:	3f 4f       	sbci	r19, 0xFF	; 255
     3fe:	89 81       	ldd	r24, Y+1	; 0x01
     400:	9a 81       	ldd	r25, Y+2	; 0x02
     402:	b9 01       	movw	r22, r18
     404:	0e 94 8f 01 	call	0x31e	; 0x31e <_ZN7CBufferIhLi10EE3IncERi>
		return true;
     408:	81 e0       	ldi	r24, 0x01	; 1
     40a:	8d 83       	std	Y+5, r24	; 0x05
     40c:	8d 81       	ldd	r24, Y+5	; 0x05
	}
     40e:	0f 90       	pop	r0
     410:	0f 90       	pop	r0
     412:	0f 90       	pop	r0
     414:	0f 90       	pop	r0
     416:	0f 90       	pop	r0
     418:	cf 91       	pop	r28
     41a:	df 91       	pop	r29
     41c:	08 95       	ret

0000041e <__vector_21>:
		//UCSR0B &= ~(1 << UDRIE0);
		UART_CONTROL &= ~(1 << UDRIE);
	}
}

ISR(USART0_RX_vect)
     41e:	1f 92       	push	r1
     420:	0f 92       	push	r0
     422:	0f b6       	in	r0, 0x3f	; 63
     424:	0f 92       	push	r0
     426:	00 90 5b 00 	lds	r0, 0x005B
     42a:	0f 92       	push	r0
     42c:	11 24       	eor	r1, r1
     42e:	2f 93       	push	r18
     430:	3f 93       	push	r19
     432:	4f 93       	push	r20
     434:	5f 93       	push	r21
     436:	6f 93       	push	r22
     438:	7f 93       	push	r23
     43a:	8f 93       	push	r24
     43c:	9f 93       	push	r25
     43e:	af 93       	push	r26
     440:	bf 93       	push	r27
     442:	ef 93       	push	r30
     444:	ff 93       	push	r31
     446:	df 93       	push	r29
     448:	cf 93       	push	r28
     44a:	0f 92       	push	r0
     44c:	cd b7       	in	r28, 0x3d	; 61
     44e:	de b7       	in	r29, 0x3e	; 62
{
	// read error flags
	//error |= UCSR0A & ((1 << FE0) | (1 << DOR0));

	uint8_t data = UDR;
     450:	e6 ec       	ldi	r30, 0xC6	; 198
     452:	f0 e0       	ldi	r31, 0x00	; 0
     454:	80 81       	ld	r24, Z
     456:	89 83       	std	Y+1, r24	; 0x01
	RxBuffer.Put(data);
     458:	89 e2       	ldi	r24, 0x29	; 41
     45a:	91 e0       	ldi	r25, 0x01	; 1
     45c:	9e 01       	movw	r18, r28
     45e:	2f 5f       	subi	r18, 0xFF	; 255
     460:	3f 4f       	sbci	r19, 0xFF	; 255
     462:	b9 01       	movw	r22, r18
     464:	0e 94 da 01 	call	0x3b4	; 0x3b4 <_ZN7CBufferIhLi10EE3PutERKh>
//	m_rxByte++;
	//UDR0 = 0x99;
}
     468:	0f 90       	pop	r0
     46a:	cf 91       	pop	r28
     46c:	df 91       	pop	r29
     46e:	ff 91       	pop	r31
     470:	ef 91       	pop	r30
     472:	bf 91       	pop	r27
     474:	af 91       	pop	r26
     476:	9f 91       	pop	r25
     478:	8f 91       	pop	r24
     47a:	7f 91       	pop	r23
     47c:	6f 91       	pop	r22
     47e:	5f 91       	pop	r21
     480:	4f 91       	pop	r20
     482:	3f 91       	pop	r19
     484:	2f 91       	pop	r18
     486:	0f 90       	pop	r0
     488:	00 92 5b 00 	sts	0x005B, r0
     48c:	0f 90       	pop	r0
     48e:	0f be       	out	0x3f, r0	; 63
     490:	0f 90       	pop	r0
     492:	1f 90       	pop	r1
     494:	18 95       	reti

00000496 <_ZN5Uart07PutCharEh>:
	m_rxByte = 0;
	m_error =0;
}
void Uart0::write(uint8_t c){PutChar(c);}

void Uart0::PutChar(uint8_t c){
     496:	df 93       	push	r29
     498:	cf 93       	push	r28
     49a:	00 d0       	rcall	.+0      	; 0x49c <_ZN5Uart07PutCharEh+0x6>
     49c:	0f 92       	push	r0
     49e:	cd b7       	in	r28, 0x3d	; 61
     4a0:	de b7       	in	r29, 0x3e	; 62
     4a2:	9a 83       	std	Y+2, r25	; 0x02
     4a4:	89 83       	std	Y+1, r24	; 0x01
     4a6:	6b 83       	std	Y+3, r22	; 0x03

	if (!TxBuffer.isFull()){
     4a8:	8a e1       	ldi	r24, 0x1A	; 26
     4aa:	91 e0       	ldi	r25, 0x01	; 1
     4ac:	0e 94 ae 01 	call	0x35c	; 0x35c <_ZN7CBufferIhLi10EE6isFullEv>
     4b0:	98 2f       	mov	r25, r24
     4b2:	81 e0       	ldi	r24, 0x01	; 1
     4b4:	89 27       	eor	r24, r25
     4b6:	88 23       	and	r24, r24
     4b8:	c1 f0       	breq	.+48     	; 0x4ea <_ZN5Uart07PutCharEh+0x54>
		TxBuffer.Put(c);
     4ba:	8a e1       	ldi	r24, 0x1A	; 26
     4bc:	91 e0       	ldi	r25, 0x01	; 1
     4be:	9e 01       	movw	r18, r28
     4c0:	2d 5f       	subi	r18, 0xFD	; 253
     4c2:	3f 4f       	sbci	r19, 0xFF	; 255
     4c4:	b9 01       	movw	r22, r18
     4c6:	0e 94 da 01 	call	0x3b4	; 0x3b4 <_ZN7CBufferIhLi10EE3PutERKh>
		m_txByte++;
     4ca:	e9 81       	ldd	r30, Y+1	; 0x01
     4cc:	fa 81       	ldd	r31, Y+2	; 0x02
     4ce:	80 81       	ld	r24, Z
     4d0:	91 81       	ldd	r25, Z+1	; 0x01
     4d2:	01 96       	adiw	r24, 0x01	; 1
     4d4:	e9 81       	ldd	r30, Y+1	; 0x01
     4d6:	fa 81       	ldd	r31, Y+2	; 0x02
     4d8:	91 83       	std	Z+1, r25	; 0x01
     4da:	80 83       	st	Z, r24
		//UDR0 = 0x99;
		//_delay_ms(200);
		//UDR0 = c;
		//UCSR0B |= (1 << UDRIE0);
		UART_CONTROL |= (1 << UDRIE);
     4dc:	a1 ec       	ldi	r26, 0xC1	; 193
     4de:	b0 e0       	ldi	r27, 0x00	; 0
     4e0:	e1 ec       	ldi	r30, 0xC1	; 193
     4e2:	f0 e0       	ldi	r31, 0x00	; 0
     4e4:	80 81       	ld	r24, Z
     4e6:	80 62       	ori	r24, 0x20	; 32
     4e8:	8c 93       	st	X, r24
	//	UART0_CONTROL |=(1<<UDRIE0);
	}else{
	//	return false;
	}
	//return true;
}
     4ea:	0f 90       	pop	r0
     4ec:	0f 90       	pop	r0
     4ee:	0f 90       	pop	r0
     4f0:	cf 91       	pop	r28
     4f2:	df 91       	pop	r29
     4f4:	08 95       	ret

000004f6 <_ZN5Uart05writeEh>:
	SetBaudRate(baudrate);
	m_txByte = 0;
	m_rxByte = 0;
	m_error =0;
}
void Uart0::write(uint8_t c){PutChar(c);}
     4f6:	df 93       	push	r29
     4f8:	cf 93       	push	r28
     4fa:	00 d0       	rcall	.+0      	; 0x4fc <_ZN5Uart05writeEh+0x6>
     4fc:	0f 92       	push	r0
     4fe:	cd b7       	in	r28, 0x3d	; 61
     500:	de b7       	in	r29, 0x3e	; 62
     502:	9a 83       	std	Y+2, r25	; 0x02
     504:	89 83       	std	Y+1, r24	; 0x01
     506:	6b 83       	std	Y+3, r22	; 0x03
     508:	89 81       	ldd	r24, Y+1	; 0x01
     50a:	9a 81       	ldd	r25, Y+2	; 0x02
     50c:	6b 81       	ldd	r22, Y+3	; 0x03
     50e:	0e 94 4b 02 	call	0x496	; 0x496 <_ZN5Uart07PutCharEh>
     512:	0f 90       	pop	r0
     514:	0f 90       	pop	r0
     516:	0f 90       	pop	r0
     518:	cf 91       	pop	r28
     51a:	df 91       	pop	r29
     51c:	08 95       	ret

0000051e <_ZN7CBufferIhLi10EE3GetERh>:
		int temp = m_put;
		Inc(temp);
		return temp == m_get;
	}

	bool Get(CBufferType &Slot){
     51e:	df 93       	push	r29
     520:	cf 93       	push	r28
     522:	00 d0       	rcall	.+0      	; 0x524 <_ZN7CBufferIhLi10EE3GetERh+0x6>
     524:	00 d0       	rcall	.+0      	; 0x526 <_ZN7CBufferIhLi10EE3GetERh+0x8>
     526:	0f 92       	push	r0
     528:	cd b7       	in	r28, 0x3d	; 61
     52a:	de b7       	in	r29, 0x3e	; 62
     52c:	9a 83       	std	Y+2, r25	; 0x02
     52e:	89 83       	std	Y+1, r24	; 0x01
     530:	7c 83       	std	Y+4, r23	; 0x04
     532:	6b 83       	std	Y+3, r22	; 0x03
		if (isEmpty())
     534:	89 81       	ldd	r24, Y+1	; 0x01
     536:	9a 81       	ldd	r25, Y+2	; 0x02
     538:	0e 94 72 01 	call	0x2e4	; 0x2e4 <_ZN7CBufferIhLi10EE7isEmptyEv>
     53c:	88 23       	and	r24, r24
     53e:	11 f0       	breq	.+4      	; 0x544 <_ZN7CBufferIhLi10EE3GetERh+0x26>
			return false;
     540:	1d 82       	std	Y+5, r1	; 0x05
     542:	19 c0       	rjmp	.+50     	; 0x576 <_ZN7CBufferIhLi10EE3GetERh+0x58>
		Slot = m_Slots[m_get];
     544:	e9 81       	ldd	r30, Y+1	; 0x01
     546:	fa 81       	ldd	r31, Y+2	; 0x02
     548:	25 85       	ldd	r18, Z+13	; 0x0d
     54a:	36 85       	ldd	r19, Z+14	; 0x0e
     54c:	89 81       	ldd	r24, Y+1	; 0x01
     54e:	9a 81       	ldd	r25, Y+2	; 0x02
     550:	fc 01       	movw	r30, r24
     552:	e2 0f       	add	r30, r18
     554:	f3 1f       	adc	r31, r19
     556:	80 81       	ld	r24, Z
     558:	eb 81       	ldd	r30, Y+3	; 0x03
     55a:	fc 81       	ldd	r31, Y+4	; 0x04
     55c:	80 83       	st	Z, r24
		Inc(m_get);
     55e:	89 81       	ldd	r24, Y+1	; 0x01
     560:	9a 81       	ldd	r25, Y+2	; 0x02
     562:	9c 01       	movw	r18, r24
     564:	23 5f       	subi	r18, 0xF3	; 243
     566:	3f 4f       	sbci	r19, 0xFF	; 255
     568:	89 81       	ldd	r24, Y+1	; 0x01
     56a:	9a 81       	ldd	r25, Y+2	; 0x02
     56c:	b9 01       	movw	r22, r18
     56e:	0e 94 8f 01 	call	0x31e	; 0x31e <_ZN7CBufferIhLi10EE3IncERi>
		return true;
     572:	81 e0       	ldi	r24, 0x01	; 1
     574:	8d 83       	std	Y+5, r24	; 0x05
     576:	8d 81       	ldd	r24, Y+5	; 0x05
	}
     578:	0f 90       	pop	r0
     57a:	0f 90       	pop	r0
     57c:	0f 90       	pop	r0
     57e:	0f 90       	pop	r0
     580:	0f 90       	pop	r0
     582:	cf 91       	pop	r28
     584:	df 91       	pop	r29
     586:	08 95       	ret

00000588 <__vector_22>:

void Uart0::GetIntStat(uint16_t &c){
	c= m_txByte;
}

ISR(USART0_UDRE_vect)
     588:	1f 92       	push	r1
     58a:	0f 92       	push	r0
     58c:	0f b6       	in	r0, 0x3f	; 63
     58e:	0f 92       	push	r0
     590:	00 90 5b 00 	lds	r0, 0x005B
     594:	0f 92       	push	r0
     596:	11 24       	eor	r1, r1
     598:	2f 93       	push	r18
     59a:	3f 93       	push	r19
     59c:	4f 93       	push	r20
     59e:	5f 93       	push	r21
     5a0:	6f 93       	push	r22
     5a2:	7f 93       	push	r23
     5a4:	8f 93       	push	r24
     5a6:	9f 93       	push	r25
     5a8:	af 93       	push	r26
     5aa:	bf 93       	push	r27
     5ac:	ef 93       	push	r30
     5ae:	ff 93       	push	r31
     5b0:	df 93       	push	r29
     5b2:	cf 93       	push	r28
     5b4:	0f 92       	push	r0
     5b6:	cd b7       	in	r28, 0x3d	; 61
     5b8:	de b7       	in	r29, 0x3e	; 62
{
	uint8_t c;
	if (!TxBuffer.isEmpty()){
     5ba:	8a e1       	ldi	r24, 0x1A	; 26
     5bc:	91 e0       	ldi	r25, 0x01	; 1
     5be:	0e 94 72 01 	call	0x2e4	; 0x2e4 <_ZN7CBufferIhLi10EE7isEmptyEv>
     5c2:	98 2f       	mov	r25, r24
     5c4:	81 e0       	ldi	r24, 0x01	; 1
     5c6:	89 27       	eor	r24, r25
     5c8:	88 23       	and	r24, r24
     5ca:	69 f0       	breq	.+26     	; 0x5e6 <__vector_22+0x5e>
		TxBuffer.Get(c);
     5cc:	8a e1       	ldi	r24, 0x1A	; 26
     5ce:	91 e0       	ldi	r25, 0x01	; 1
     5d0:	9e 01       	movw	r18, r28
     5d2:	2f 5f       	subi	r18, 0xFF	; 255
     5d4:	3f 4f       	sbci	r19, 0xFF	; 255
     5d6:	b9 01       	movw	r22, r18
     5d8:	0e 94 8f 02 	call	0x51e	; 0x51e <_ZN7CBufferIhLi10EE3GetERh>
		UDR = c;
     5dc:	e6 ec       	ldi	r30, 0xC6	; 198
     5de:	f0 e0       	ldi	r31, 0x00	; 0
     5e0:	89 81       	ldd	r24, Y+1	; 0x01
     5e2:	80 83       	st	Z, r24
     5e4:	07 c0       	rjmp	.+14     	; 0x5f4 <__vector_22+0x6c>
	}else{
		// transmission finished, disable UDRE interrupt
		//UCSR0B &= ~(1 << UDRIE0);
		UART_CONTROL &= ~(1 << UDRIE);
     5e6:	a1 ec       	ldi	r26, 0xC1	; 193
     5e8:	b0 e0       	ldi	r27, 0x00	; 0
     5ea:	e1 ec       	ldi	r30, 0xC1	; 193
     5ec:	f0 e0       	ldi	r31, 0x00	; 0
     5ee:	80 81       	ld	r24, Z
     5f0:	8f 7d       	andi	r24, 0xDF	; 223
     5f2:	8c 93       	st	X, r24
	}
}
     5f4:	0f 90       	pop	r0
     5f6:	cf 91       	pop	r28
     5f8:	df 91       	pop	r29
     5fa:	ff 91       	pop	r31
     5fc:	ef 91       	pop	r30
     5fe:	bf 91       	pop	r27
     600:	af 91       	pop	r26
     602:	9f 91       	pop	r25
     604:	8f 91       	pop	r24
     606:	7f 91       	pop	r23
     608:	6f 91       	pop	r22
     60a:	5f 91       	pop	r21
     60c:	4f 91       	pop	r20
     60e:	3f 91       	pop	r19
     610:	2f 91       	pop	r18
     612:	0f 90       	pop	r0
     614:	00 92 5b 00 	sts	0x005B, r0
     618:	0f 90       	pop	r0
     61a:	0f be       	out	0x3f, r0	; 63
     61c:	0f 90       	pop	r0
     61e:	1f 90       	pop	r1
     620:	18 95       	reti

00000622 <_ZN5Uart07GetCharERh>:
	}else{
	//	return false;
	}
	//return true;
}
bool Uart0::GetChar(uint8_t &c)
     622:	df 93       	push	r29
     624:	cf 93       	push	r28
     626:	00 d0       	rcall	.+0      	; 0x628 <_ZN5Uart07GetCharERh+0x6>
     628:	0f 92       	push	r0
     62a:	cd b7       	in	r28, 0x3d	; 61
     62c:	de b7       	in	r29, 0x3e	; 62
     62e:	9a 83       	std	Y+2, r25	; 0x02
     630:	89 83       	std	Y+1, r24	; 0x01
{
	if (RxBuffer.isEmpty()) {
     632:	89 e2       	ldi	r24, 0x29	; 41
     634:	91 e0       	ldi	r25, 0x01	; 1
     636:	0e 94 72 01 	call	0x2e4	; 0x2e4 <_ZN7CBufferIhLi10EE7isEmptyEv>
     63a:	88 23       	and	r24, r24
     63c:	11 f0       	breq	.+4      	; 0x642 <_ZN5Uart07GetCharERh+0x20>
		return false;
     63e:	1b 82       	std	Y+3, r1	; 0x03
     640:	09 c0       	rjmp	.+18     	; 0x654 <_ZN5Uart07GetCharERh+0x32>
	}
	else {
		RxBuffer.Get(c);
     642:	89 e2       	ldi	r24, 0x29	; 41
     644:	91 e0       	ldi	r25, 0x01	; 1
     646:	29 81       	ldd	r18, Y+1	; 0x01
     648:	3a 81       	ldd	r19, Y+2	; 0x02
     64a:	b9 01       	movw	r22, r18
     64c:	0e 94 8f 02 	call	0x51e	; 0x51e <_ZN7CBufferIhLi10EE3GetERh>
//		m_txByte++;
		//RxBuffer.pop();

		return true;
     650:	81 e0       	ldi	r24, 0x01	; 1
     652:	8b 83       	std	Y+3, r24	; 0x03
     654:	8b 81       	ldd	r24, Y+3	; 0x03
	}
}
     656:	0f 90       	pop	r0
     658:	0f 90       	pop	r0
     65a:	0f 90       	pop	r0
     65c:	cf 91       	pop	r28
     65e:	df 91       	pop	r29
     660:	08 95       	ret

00000662 <_Z41__static_initialization_and_destruction_0ii>:

	uint8_t data = UDR;
	RxBuffer.Put(data);
//	m_rxByte++;
	//UDR0 = 0x99;
}
     662:	df 93       	push	r29
     664:	cf 93       	push	r28
     666:	00 d0       	rcall	.+0      	; 0x668 <_Z41__static_initialization_and_destruction_0ii+0x6>
     668:	00 d0       	rcall	.+0      	; 0x66a <_Z41__static_initialization_and_destruction_0ii+0x8>
     66a:	cd b7       	in	r28, 0x3d	; 61
     66c:	de b7       	in	r29, 0x3e	; 62
     66e:	9a 83       	std	Y+2, r25	; 0x02
     670:	89 83       	std	Y+1, r24	; 0x01
     672:	7c 83       	std	Y+4, r23	; 0x04
     674:	6b 83       	std	Y+3, r22	; 0x03
     676:	89 81       	ldd	r24, Y+1	; 0x01
     678:	9a 81       	ldd	r25, Y+2	; 0x02
     67a:	81 30       	cpi	r24, 0x01	; 1
     67c:	91 05       	cpc	r25, r1
     67e:	71 f4       	brne	.+28     	; 0x69c <_Z41__static_initialization_and_destruction_0ii+0x3a>
     680:	8b 81       	ldd	r24, Y+3	; 0x03
     682:	9c 81       	ldd	r25, Y+4	; 0x04
     684:	2f ef       	ldi	r18, 0xFF	; 255
     686:	8f 3f       	cpi	r24, 0xFF	; 255
     688:	92 07       	cpc	r25, r18
     68a:	41 f4       	brne	.+16     	; 0x69c <_Z41__static_initialization_and_destruction_0ii+0x3a>
#include <avr/io.h>
#include <avr/interrupt.h>

//#if defined USART0_UDRE_vect

static CBuffer<uint8_t,10> TxBuffer;
     68c:	8a e1       	ldi	r24, 0x1A	; 26
     68e:	91 e0       	ldi	r25, 0x01	; 1
     690:	0e 94 5e 01 	call	0x2bc	; 0x2bc <_ZN7CBufferIhLi10EEC1Ev>
static CBuffer<uint8_t,10> RxBuffer;
     694:	89 e2       	ldi	r24, 0x29	; 41
     696:	91 e0       	ldi	r25, 0x01	; 1
     698:	0e 94 5e 01 	call	0x2bc	; 0x2bc <_ZN7CBufferIhLi10EEC1Ev>

	uint8_t data = UDR;
	RxBuffer.Put(data);
//	m_rxByte++;
	//UDR0 = 0x99;
}
     69c:	0f 90       	pop	r0
     69e:	0f 90       	pop	r0
     6a0:	0f 90       	pop	r0
     6a2:	0f 90       	pop	r0
     6a4:	cf 91       	pop	r28
     6a6:	df 91       	pop	r29
     6a8:	08 95       	ret

000006aa <_GLOBAL__I__ZN5Uart0C2Em>:
     6aa:	df 93       	push	r29
     6ac:	cf 93       	push	r28
     6ae:	cd b7       	in	r28, 0x3d	; 61
     6b0:	de b7       	in	r29, 0x3e	; 62
     6b2:	81 e0       	ldi	r24, 0x01	; 1
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	6f ef       	ldi	r22, 0xFF	; 255
     6b8:	7f ef       	ldi	r23, 0xFF	; 255
     6ba:	0e 94 31 03 	call	0x662	; 0x662 <_Z41__static_initialization_and_destruction_0ii>
     6be:	cf 91       	pop	r28
     6c0:	df 91       	pop	r29
     6c2:	08 95       	ret

000006c4 <_ZN5Uart111SetBaudRateEm>:

//	CBuffer<uint8_t,20> TxBuffer;
//	CBuffer<uint8_t,20> RxBuffer;


	void SetBaudRate(uint32_t baudrate = 9600){
     6c4:	0f 93       	push	r16
     6c6:	1f 93       	push	r17
     6c8:	df 93       	push	r29
     6ca:	cf 93       	push	r28
     6cc:	00 d0       	rcall	.+0      	; 0x6ce <_ZN5Uart111SetBaudRateEm+0xa>
     6ce:	00 d0       	rcall	.+0      	; 0x6d0 <_ZN5Uart111SetBaudRateEm+0xc>
     6d0:	00 d0       	rcall	.+0      	; 0x6d2 <_ZN5Uart111SetBaudRateEm+0xe>
     6d2:	cd b7       	in	r28, 0x3d	; 61
     6d4:	de b7       	in	r29, 0x3e	; 62
     6d6:	9a 83       	std	Y+2, r25	; 0x02
     6d8:	89 83       	std	Y+1, r24	; 0x01
     6da:	4b 83       	std	Y+3, r20	; 0x03
     6dc:	5c 83       	std	Y+4, r21	; 0x04
     6de:	6d 83       	std	Y+5, r22	; 0x05
     6e0:	7e 83       	std	Y+6, r23	; 0x06

	    UBRRH = (unsigned char)(UBRR_CALC(baudrate,F_CPU) >> 8);
     6e2:	0d ec       	ldi	r16, 0xCD	; 205
     6e4:	10 e0       	ldi	r17, 0x00	; 0
     6e6:	8b 81       	ldd	r24, Y+3	; 0x03
     6e8:	9c 81       	ldd	r25, Y+4	; 0x04
     6ea:	ad 81       	ldd	r26, Y+5	; 0x05
     6ec:	be 81       	ldd	r27, Y+6	; 0x06
     6ee:	88 0f       	add	r24, r24
     6f0:	99 1f       	adc	r25, r25
     6f2:	aa 1f       	adc	r26, r26
     6f4:	bb 1f       	adc	r27, r27
     6f6:	88 0f       	add	r24, r24
     6f8:	99 1f       	adc	r25, r25
     6fa:	aa 1f       	adc	r26, r26
     6fc:	bb 1f       	adc	r27, r27
     6fe:	88 0f       	add	r24, r24
     700:	99 1f       	adc	r25, r25
     702:	aa 1f       	adc	r26, r26
     704:	bb 1f       	adc	r27, r27
     706:	9c 01       	movw	r18, r24
     708:	ad 01       	movw	r20, r26
     70a:	80 e0       	ldi	r24, 0x00	; 0
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	a1 ee       	ldi	r26, 0xE1	; 225
     710:	b0 e0       	ldi	r27, 0x00	; 0
     712:	bc 01       	movw	r22, r24
     714:	cd 01       	movw	r24, r26
     716:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <__udivmodsi4>
     71a:	da 01       	movw	r26, r20
     71c:	c9 01       	movw	r24, r18
     71e:	01 97       	sbiw	r24, 0x01	; 1
     720:	a1 09       	sbc	r26, r1
     722:	b1 09       	sbc	r27, r1
     724:	89 2f       	mov	r24, r25
     726:	9a 2f       	mov	r25, r26
     728:	ab 2f       	mov	r26, r27
     72a:	bb 27       	eor	r27, r27
     72c:	f8 01       	movw	r30, r16
     72e:	80 83       	st	Z, r24
	    UBRRL = (unsigned char) UBRR_CALC(baudrate,F_CPU);
     730:	0c ec       	ldi	r16, 0xCC	; 204
     732:	10 e0       	ldi	r17, 0x00	; 0
     734:	8b 81       	ldd	r24, Y+3	; 0x03
     736:	9c 81       	ldd	r25, Y+4	; 0x04
     738:	ad 81       	ldd	r26, Y+5	; 0x05
     73a:	be 81       	ldd	r27, Y+6	; 0x06
     73c:	88 0f       	add	r24, r24
     73e:	99 1f       	adc	r25, r25
     740:	aa 1f       	adc	r26, r26
     742:	bb 1f       	adc	r27, r27
     744:	88 0f       	add	r24, r24
     746:	99 1f       	adc	r25, r25
     748:	aa 1f       	adc	r26, r26
     74a:	bb 1f       	adc	r27, r27
     74c:	88 0f       	add	r24, r24
     74e:	99 1f       	adc	r25, r25
     750:	aa 1f       	adc	r26, r26
     752:	bb 1f       	adc	r27, r27
     754:	9c 01       	movw	r18, r24
     756:	ad 01       	movw	r20, r26
     758:	80 e0       	ldi	r24, 0x00	; 0
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	a1 ee       	ldi	r26, 0xE1	; 225
     75e:	b0 e0       	ldi	r27, 0x00	; 0
     760:	bc 01       	movw	r22, r24
     762:	cd 01       	movw	r24, r26
     764:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <__udivmodsi4>
     768:	da 01       	movw	r26, r20
     76a:	c9 01       	movw	r24, r18
     76c:	81 50       	subi	r24, 0x01	; 1
     76e:	f8 01       	movw	r30, r16
     770:	80 83       	st	Z, r24

	    UART_STATUS = (1<<U2X);
     772:	e8 ec       	ldi	r30, 0xC8	; 200
     774:	f0 e0       	ldi	r31, 0x00	; 0
     776:	82 e0       	ldi	r24, 0x02	; 2
     778:	80 83       	st	Z, r24

	    /* Enable UART receiver and transmitter */
	    UART_CONTROL = ( ( 1 << RXEN ) | ( 1 << TXEN ) );
     77a:	e9 ec       	ldi	r30, 0xC9	; 201
     77c:	f0 e0       	ldi	r31, 0x00	; 0
     77e:	88 e1       	ldi	r24, 0x18	; 24
     780:	80 83       	st	Z, r24

	    /* Set frame format: 8N1 */
	    UART_MODE = (3<<CHARSIZE);
     782:	ea ec       	ldi	r30, 0xCA	; 202
     784:	f0 e0       	ldi	r31, 0x00	; 0
     786:	8c e0       	ldi	r24, 0x0C	; 12
     788:	80 83       	st	Z, r24

	    /* Enable Interrupt */
	    UART_CONTROL |= (1<<TXEN) | (1<<RXEN) | (1 << RXCIE);
     78a:	a9 ec       	ldi	r26, 0xC9	; 201
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	e9 ec       	ldi	r30, 0xC9	; 201
     790:	f0 e0       	ldi	r31, 0x00	; 0
     792:	80 81       	ld	r24, Z
     794:	88 69       	ori	r24, 0x98	; 152
     796:	8c 93       	st	X, r24
	}
     798:	26 96       	adiw	r28, 0x06	; 6
     79a:	0f b6       	in	r0, 0x3f	; 63
     79c:	f8 94       	cli
     79e:	de bf       	out	0x3e, r29	; 62
     7a0:	0f be       	out	0x3f, r0	; 63
     7a2:	cd bf       	out	0x3d, r28	; 61
     7a4:	cf 91       	pop	r28
     7a6:	df 91       	pop	r29
     7a8:	1f 91       	pop	r17
     7aa:	0f 91       	pop	r16
     7ac:	08 95       	ret

000007ae <_ZN5Uart1C2Em>:
//#if defined USART0_UDRE_vect

static CBuffer<uint8_t,10> TxBuffer;
static CBuffer<uint8_t,10> RxBuffer;

Uart1::Uart1(uint32_t baudrate){
     7ae:	df 93       	push	r29
     7b0:	cf 93       	push	r28
     7b2:	00 d0       	rcall	.+0      	; 0x7b4 <_ZN5Uart1C2Em+0x6>
     7b4:	00 d0       	rcall	.+0      	; 0x7b6 <_ZN5Uart1C2Em+0x8>
     7b6:	00 d0       	rcall	.+0      	; 0x7b8 <_ZN5Uart1C2Em+0xa>
     7b8:	cd b7       	in	r28, 0x3d	; 61
     7ba:	de b7       	in	r29, 0x3e	; 62
     7bc:	9a 83       	std	Y+2, r25	; 0x02
     7be:	89 83       	std	Y+1, r24	; 0x01
     7c0:	4b 83       	std	Y+3, r20	; 0x03
     7c2:	5c 83       	std	Y+4, r21	; 0x04
     7c4:	6d 83       	std	Y+5, r22	; 0x05
     7c6:	7e 83       	std	Y+6, r23	; 0x06
	SetBaudRate(baudrate);
     7c8:	89 81       	ldd	r24, Y+1	; 0x01
     7ca:	9a 81       	ldd	r25, Y+2	; 0x02
     7cc:	2b 81       	ldd	r18, Y+3	; 0x03
     7ce:	3c 81       	ldd	r19, Y+4	; 0x04
     7d0:	4d 81       	ldd	r20, Y+5	; 0x05
     7d2:	5e 81       	ldd	r21, Y+6	; 0x06
     7d4:	ba 01       	movw	r22, r20
     7d6:	a9 01       	movw	r20, r18
     7d8:	0e 94 62 03 	call	0x6c4	; 0x6c4 <_ZN5Uart111SetBaudRateEm>
	m_txByte = 0;
     7dc:	e9 81       	ldd	r30, Y+1	; 0x01
     7de:	fa 81       	ldd	r31, Y+2	; 0x02
     7e0:	11 82       	std	Z+1, r1	; 0x01
     7e2:	10 82       	st	Z, r1
	m_rxByte = 0;
     7e4:	e9 81       	ldd	r30, Y+1	; 0x01
     7e6:	fa 81       	ldd	r31, Y+2	; 0x02
     7e8:	13 82       	std	Z+3, r1	; 0x03
     7ea:	12 82       	std	Z+2, r1	; 0x02
	m_error =0;
     7ec:	e9 81       	ldd	r30, Y+1	; 0x01
     7ee:	fa 81       	ldd	r31, Y+2	; 0x02
     7f0:	15 82       	std	Z+5, r1	; 0x05
     7f2:	14 82       	std	Z+4, r1	; 0x04
}
     7f4:	26 96       	adiw	r28, 0x06	; 6
     7f6:	0f b6       	in	r0, 0x3f	; 63
     7f8:	f8 94       	cli
     7fa:	de bf       	out	0x3e, r29	; 62
     7fc:	0f be       	out	0x3f, r0	; 63
     7fe:	cd bf       	out	0x3d, r28	; 61
     800:	cf 91       	pop	r28
     802:	df 91       	pop	r29
     804:	08 95       	ret

00000806 <_ZN5Uart1C1Em>:
//#if defined USART0_UDRE_vect

static CBuffer<uint8_t,10> TxBuffer;
static CBuffer<uint8_t,10> RxBuffer;

Uart1::Uart1(uint32_t baudrate){
     806:	df 93       	push	r29
     808:	cf 93       	push	r28
     80a:	00 d0       	rcall	.+0      	; 0x80c <_ZN5Uart1C1Em+0x6>
     80c:	00 d0       	rcall	.+0      	; 0x80e <_ZN5Uart1C1Em+0x8>
     80e:	00 d0       	rcall	.+0      	; 0x810 <_ZN5Uart1C1Em+0xa>
     810:	cd b7       	in	r28, 0x3d	; 61
     812:	de b7       	in	r29, 0x3e	; 62
     814:	9a 83       	std	Y+2, r25	; 0x02
     816:	89 83       	std	Y+1, r24	; 0x01
     818:	4b 83       	std	Y+3, r20	; 0x03
     81a:	5c 83       	std	Y+4, r21	; 0x04
     81c:	6d 83       	std	Y+5, r22	; 0x05
     81e:	7e 83       	std	Y+6, r23	; 0x06
	SetBaudRate(baudrate);
     820:	89 81       	ldd	r24, Y+1	; 0x01
     822:	9a 81       	ldd	r25, Y+2	; 0x02
     824:	2b 81       	ldd	r18, Y+3	; 0x03
     826:	3c 81       	ldd	r19, Y+4	; 0x04
     828:	4d 81       	ldd	r20, Y+5	; 0x05
     82a:	5e 81       	ldd	r21, Y+6	; 0x06
     82c:	ba 01       	movw	r22, r20
     82e:	a9 01       	movw	r20, r18
     830:	0e 94 62 03 	call	0x6c4	; 0x6c4 <_ZN5Uart111SetBaudRateEm>
	m_txByte = 0;
     834:	e9 81       	ldd	r30, Y+1	; 0x01
     836:	fa 81       	ldd	r31, Y+2	; 0x02
     838:	11 82       	std	Z+1, r1	; 0x01
     83a:	10 82       	st	Z, r1
	m_rxByte = 0;
     83c:	e9 81       	ldd	r30, Y+1	; 0x01
     83e:	fa 81       	ldd	r31, Y+2	; 0x02
     840:	13 82       	std	Z+3, r1	; 0x03
     842:	12 82       	std	Z+2, r1	; 0x02
	m_error =0;
     844:	e9 81       	ldd	r30, Y+1	; 0x01
     846:	fa 81       	ldd	r31, Y+2	; 0x02
     848:	15 82       	std	Z+5, r1	; 0x05
     84a:	14 82       	std	Z+4, r1	; 0x04
}
     84c:	26 96       	adiw	r28, 0x06	; 6
     84e:	0f b6       	in	r0, 0x3f	; 63
     850:	f8 94       	cli
     852:	de bf       	out	0x3e, r29	; 62
     854:	0f be       	out	0x3f, r0	; 63
     856:	cd bf       	out	0x3d, r28	; 61
     858:	cf 91       	pop	r28
     85a:	df 91       	pop	r29
     85c:	08 95       	ret

0000085e <_ZN5Uart110GetIntStatERj>:

		return true;
	}
}

void Uart1::GetIntStat(uint16_t &c){
     85e:	df 93       	push	r29
     860:	cf 93       	push	r28
     862:	00 d0       	rcall	.+0      	; 0x864 <_ZN5Uart110GetIntStatERj+0x6>
     864:	00 d0       	rcall	.+0      	; 0x866 <_ZN5Uart110GetIntStatERj+0x8>
     866:	cd b7       	in	r28, 0x3d	; 61
     868:	de b7       	in	r29, 0x3e	; 62
     86a:	9a 83       	std	Y+2, r25	; 0x02
     86c:	89 83       	std	Y+1, r24	; 0x01
     86e:	7c 83       	std	Y+4, r23	; 0x04
     870:	6b 83       	std	Y+3, r22	; 0x03
	c= m_txByte;
     872:	e9 81       	ldd	r30, Y+1	; 0x01
     874:	fa 81       	ldd	r31, Y+2	; 0x02
     876:	80 81       	ld	r24, Z
     878:	91 81       	ldd	r25, Z+1	; 0x01
     87a:	eb 81       	ldd	r30, Y+3	; 0x03
     87c:	fc 81       	ldd	r31, Y+4	; 0x04
     87e:	91 83       	std	Z+1, r25	; 0x01
     880:	80 83       	st	Z, r24
}
     882:	0f 90       	pop	r0
     884:	0f 90       	pop	r0
     886:	0f 90       	pop	r0
     888:	0f 90       	pop	r0
     88a:	cf 91       	pop	r28
     88c:	df 91       	pop	r29
     88e:	08 95       	ret
     890:	df 93       	push	r29
     892:	cf 93       	push	r28
     894:	00 d0       	rcall	.+0      	; 0x896 <_ZN5Uart110GetIntStatERj+0x38>
     896:	cd b7       	in	r28, 0x3d	; 61
     898:	de b7       	in	r29, 0x3e	; 62
     89a:	9a 83       	std	Y+2, r25	; 0x02
     89c:	89 83       	std	Y+1, r24	; 0x01
     89e:	e9 81       	ldd	r30, Y+1	; 0x01
     8a0:	fa 81       	ldd	r31, Y+2	; 0x02
     8a2:	14 86       	std	Z+12, r1	; 0x0c
     8a4:	13 86       	std	Z+11, r1	; 0x0b
     8a6:	e9 81       	ldd	r30, Y+1	; 0x01
     8a8:	fa 81       	ldd	r31, Y+2	; 0x02
     8aa:	16 86       	std	Z+14, r1	; 0x0e
     8ac:	15 86       	std	Z+13, r1	; 0x0d
     8ae:	0f 90       	pop	r0
     8b0:	0f 90       	pop	r0
     8b2:	cf 91       	pop	r28
     8b4:	df 91       	pop	r29
     8b6:	08 95       	ret
     8b8:	df 93       	push	r29
     8ba:	cf 93       	push	r28
     8bc:	00 d0       	rcall	.+0      	; 0x8be <_ZN5Uart110GetIntStatERj+0x60>
     8be:	0f 92       	push	r0
     8c0:	cd b7       	in	r28, 0x3d	; 61
     8c2:	de b7       	in	r29, 0x3e	; 62
     8c4:	9a 83       	std	Y+2, r25	; 0x02
     8c6:	89 83       	std	Y+1, r24	; 0x01
     8c8:	e9 81       	ldd	r30, Y+1	; 0x01
     8ca:	fa 81       	ldd	r31, Y+2	; 0x02
     8cc:	23 85       	ldd	r18, Z+11	; 0x0b
     8ce:	34 85       	ldd	r19, Z+12	; 0x0c
     8d0:	e9 81       	ldd	r30, Y+1	; 0x01
     8d2:	fa 81       	ldd	r31, Y+2	; 0x02
     8d4:	85 85       	ldd	r24, Z+13	; 0x0d
     8d6:	96 85       	ldd	r25, Z+14	; 0x0e
     8d8:	1b 82       	std	Y+3, r1	; 0x03
     8da:	28 17       	cp	r18, r24
     8dc:	39 07       	cpc	r19, r25
     8de:	11 f4       	brne	.+4      	; 0x8e4 <_ZN5Uart110GetIntStatERj+0x86>
     8e0:	81 e0       	ldi	r24, 0x01	; 1
     8e2:	8b 83       	std	Y+3, r24	; 0x03
     8e4:	8b 81       	ldd	r24, Y+3	; 0x03
     8e6:	0f 90       	pop	r0
     8e8:	0f 90       	pop	r0
     8ea:	0f 90       	pop	r0
     8ec:	cf 91       	pop	r28
     8ee:	df 91       	pop	r29
     8f0:	08 95       	ret
     8f2:	df 93       	push	r29
     8f4:	cf 93       	push	r28
     8f6:	00 d0       	rcall	.+0      	; 0x8f8 <_ZN5Uart110GetIntStatERj+0x9a>
     8f8:	00 d0       	rcall	.+0      	; 0x8fa <_ZN5Uart110GetIntStatERj+0x9c>
     8fa:	cd b7       	in	r28, 0x3d	; 61
     8fc:	de b7       	in	r29, 0x3e	; 62
     8fe:	9a 83       	std	Y+2, r25	; 0x02
     900:	89 83       	std	Y+1, r24	; 0x01
     902:	7c 83       	std	Y+4, r23	; 0x04
     904:	6b 83       	std	Y+3, r22	; 0x03
     906:	eb 81       	ldd	r30, Y+3	; 0x03
     908:	fc 81       	ldd	r31, Y+4	; 0x04
     90a:	80 81       	ld	r24, Z
     90c:	91 81       	ldd	r25, Z+1	; 0x01
     90e:	01 96       	adiw	r24, 0x01	; 1
     910:	2b e0       	ldi	r18, 0x0B	; 11
     912:	30 e0       	ldi	r19, 0x00	; 0
     914:	b9 01       	movw	r22, r18
     916:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <__divmodhi4>
     91a:	eb 81       	ldd	r30, Y+3	; 0x03
     91c:	fc 81       	ldd	r31, Y+4	; 0x04
     91e:	91 83       	std	Z+1, r25	; 0x01
     920:	80 83       	st	Z, r24
     922:	0f 90       	pop	r0
     924:	0f 90       	pop	r0
     926:	0f 90       	pop	r0
     928:	0f 90       	pop	r0
     92a:	cf 91       	pop	r28
     92c:	df 91       	pop	r29
     92e:	08 95       	ret
     930:	df 93       	push	r29
     932:	cf 93       	push	r28
     934:	00 d0       	rcall	.+0      	; 0x936 <_ZN5Uart110GetIntStatERj+0xd8>
     936:	00 d0       	rcall	.+0      	; 0x938 <_ZN5Uart110GetIntStatERj+0xda>
     938:	0f 92       	push	r0
     93a:	cd b7       	in	r28, 0x3d	; 61
     93c:	de b7       	in	r29, 0x3e	; 62
     93e:	9c 83       	std	Y+4, r25	; 0x04
     940:	8b 83       	std	Y+3, r24	; 0x03
     942:	eb 81       	ldd	r30, Y+3	; 0x03
     944:	fc 81       	ldd	r31, Y+4	; 0x04
     946:	83 85       	ldd	r24, Z+11	; 0x0b
     948:	94 85       	ldd	r25, Z+12	; 0x0c
     94a:	9a 83       	std	Y+2, r25	; 0x02
     94c:	89 83       	std	Y+1, r24	; 0x01
     94e:	8b 81       	ldd	r24, Y+3	; 0x03
     950:	9c 81       	ldd	r25, Y+4	; 0x04
     952:	9e 01       	movw	r18, r28
     954:	2f 5f       	subi	r18, 0xFF	; 255
     956:	3f 4f       	sbci	r19, 0xFF	; 255
     958:	b9 01       	movw	r22, r18
     95a:	0e 94 8f 01 	call	0x31e	; 0x31e <_ZN7CBufferIhLi10EE3IncERi>
     95e:	eb 81       	ldd	r30, Y+3	; 0x03
     960:	fc 81       	ldd	r31, Y+4	; 0x04
     962:	25 85       	ldd	r18, Z+13	; 0x0d
     964:	36 85       	ldd	r19, Z+14	; 0x0e
     966:	89 81       	ldd	r24, Y+1	; 0x01
     968:	9a 81       	ldd	r25, Y+2	; 0x02
     96a:	1d 82       	std	Y+5, r1	; 0x05
     96c:	28 17       	cp	r18, r24
     96e:	39 07       	cpc	r19, r25
     970:	11 f4       	brne	.+4      	; 0x976 <_ZN5Uart110GetIntStatERj+0x118>
     972:	81 e0       	ldi	r24, 0x01	; 1
     974:	8d 83       	std	Y+5, r24	; 0x05
     976:	8d 81       	ldd	r24, Y+5	; 0x05
     978:	0f 90       	pop	r0
     97a:	0f 90       	pop	r0
     97c:	0f 90       	pop	r0
     97e:	0f 90       	pop	r0
     980:	0f 90       	pop	r0
     982:	cf 91       	pop	r28
     984:	df 91       	pop	r29
     986:	08 95       	ret
     988:	df 93       	push	r29
     98a:	cf 93       	push	r28
     98c:	00 d0       	rcall	.+0      	; 0x98e <_ZN5Uart110GetIntStatERj+0x130>
     98e:	00 d0       	rcall	.+0      	; 0x990 <_ZN5Uart110GetIntStatERj+0x132>
     990:	0f 92       	push	r0
     992:	cd b7       	in	r28, 0x3d	; 61
     994:	de b7       	in	r29, 0x3e	; 62
     996:	9a 83       	std	Y+2, r25	; 0x02
     998:	89 83       	std	Y+1, r24	; 0x01
     99a:	7c 83       	std	Y+4, r23	; 0x04
     99c:	6b 83       	std	Y+3, r22	; 0x03
     99e:	89 81       	ldd	r24, Y+1	; 0x01
     9a0:	9a 81       	ldd	r25, Y+2	; 0x02
     9a2:	0e 94 ae 01 	call	0x35c	; 0x35c <_ZN7CBufferIhLi10EE6isFullEv>
     9a6:	88 23       	and	r24, r24
     9a8:	11 f0       	breq	.+4      	; 0x9ae <_ZN5Uart110GetIntStatERj+0x150>
     9aa:	1d 82       	std	Y+5, r1	; 0x05
     9ac:	19 c0       	rjmp	.+50     	; 0x9e0 <_ZN5Uart110GetIntStatERj+0x182>
     9ae:	e9 81       	ldd	r30, Y+1	; 0x01
     9b0:	fa 81       	ldd	r31, Y+2	; 0x02
     9b2:	23 85       	ldd	r18, Z+11	; 0x0b
     9b4:	34 85       	ldd	r19, Z+12	; 0x0c
     9b6:	eb 81       	ldd	r30, Y+3	; 0x03
     9b8:	fc 81       	ldd	r31, Y+4	; 0x04
     9ba:	40 81       	ld	r20, Z
     9bc:	89 81       	ldd	r24, Y+1	; 0x01
     9be:	9a 81       	ldd	r25, Y+2	; 0x02
     9c0:	fc 01       	movw	r30, r24
     9c2:	e2 0f       	add	r30, r18
     9c4:	f3 1f       	adc	r31, r19
     9c6:	40 83       	st	Z, r20
     9c8:	89 81       	ldd	r24, Y+1	; 0x01
     9ca:	9a 81       	ldd	r25, Y+2	; 0x02
     9cc:	9c 01       	movw	r18, r24
     9ce:	25 5f       	subi	r18, 0xF5	; 245
     9d0:	3f 4f       	sbci	r19, 0xFF	; 255
     9d2:	89 81       	ldd	r24, Y+1	; 0x01
     9d4:	9a 81       	ldd	r25, Y+2	; 0x02
     9d6:	b9 01       	movw	r22, r18
     9d8:	0e 94 8f 01 	call	0x31e	; 0x31e <_ZN7CBufferIhLi10EE3IncERi>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	8d 83       	std	Y+5, r24	; 0x05
     9e0:	8d 81       	ldd	r24, Y+5	; 0x05
     9e2:	0f 90       	pop	r0
     9e4:	0f 90       	pop	r0
     9e6:	0f 90       	pop	r0
     9e8:	0f 90       	pop	r0
     9ea:	0f 90       	pop	r0
     9ec:	cf 91       	pop	r28
     9ee:	df 91       	pop	r29
     9f0:	08 95       	ret

000009f2 <__vector_32>:
		//UCSR0B &= ~(1 << UDRIE0);
		UART_CONTROL &= ~(1 << UDRIE);
	}
}

ISR(USART1_RX_vect)
     9f2:	1f 92       	push	r1
     9f4:	0f 92       	push	r0
     9f6:	0f b6       	in	r0, 0x3f	; 63
     9f8:	0f 92       	push	r0
     9fa:	00 90 5b 00 	lds	r0, 0x005B
     9fe:	0f 92       	push	r0
     a00:	11 24       	eor	r1, r1
     a02:	2f 93       	push	r18
     a04:	3f 93       	push	r19
     a06:	4f 93       	push	r20
     a08:	5f 93       	push	r21
     a0a:	6f 93       	push	r22
     a0c:	7f 93       	push	r23
     a0e:	8f 93       	push	r24
     a10:	9f 93       	push	r25
     a12:	af 93       	push	r26
     a14:	bf 93       	push	r27
     a16:	ef 93       	push	r30
     a18:	ff 93       	push	r31
     a1a:	df 93       	push	r29
     a1c:	cf 93       	push	r28
     a1e:	0f 92       	push	r0
     a20:	cd b7       	in	r28, 0x3d	; 61
     a22:	de b7       	in	r29, 0x3e	; 62
{
	// read error flags
	//error |= UCSR0A & ((1 << FE0) | (1 << DOR0));

	uint8_t data = UDR;
     a24:	ee ec       	ldi	r30, 0xCE	; 206
     a26:	f0 e0       	ldi	r31, 0x00	; 0
     a28:	80 81       	ld	r24, Z
     a2a:	89 83       	std	Y+1, r24	; 0x01
	RxBuffer.Put(data);
     a2c:	87 e4       	ldi	r24, 0x47	; 71
     a2e:	91 e0       	ldi	r25, 0x01	; 1
     a30:	9e 01       	movw	r18, r28
     a32:	2f 5f       	subi	r18, 0xFF	; 255
     a34:	3f 4f       	sbci	r19, 0xFF	; 255
     a36:	b9 01       	movw	r22, r18
     a38:	0e 94 da 01 	call	0x3b4	; 0x3b4 <_ZN7CBufferIhLi10EE3PutERKh>
//	m_rxByte++;
	//UDR0 = 0x99;
}
     a3c:	0f 90       	pop	r0
     a3e:	cf 91       	pop	r28
     a40:	df 91       	pop	r29
     a42:	ff 91       	pop	r31
     a44:	ef 91       	pop	r30
     a46:	bf 91       	pop	r27
     a48:	af 91       	pop	r26
     a4a:	9f 91       	pop	r25
     a4c:	8f 91       	pop	r24
     a4e:	7f 91       	pop	r23
     a50:	6f 91       	pop	r22
     a52:	5f 91       	pop	r21
     a54:	4f 91       	pop	r20
     a56:	3f 91       	pop	r19
     a58:	2f 91       	pop	r18
     a5a:	0f 90       	pop	r0
     a5c:	00 92 5b 00 	sts	0x005B, r0
     a60:	0f 90       	pop	r0
     a62:	0f be       	out	0x3f, r0	; 63
     a64:	0f 90       	pop	r0
     a66:	1f 90       	pop	r1
     a68:	18 95       	reti

00000a6a <_ZN5Uart17PutCharEh>:
	m_rxByte = 0;
	m_error =0;
}
void Uart1::write(uint8_t c){PutChar(c);}

void Uart1::PutChar(uint8_t c){
     a6a:	df 93       	push	r29
     a6c:	cf 93       	push	r28
     a6e:	00 d0       	rcall	.+0      	; 0xa70 <_ZN5Uart17PutCharEh+0x6>
     a70:	0f 92       	push	r0
     a72:	cd b7       	in	r28, 0x3d	; 61
     a74:	de b7       	in	r29, 0x3e	; 62
     a76:	9a 83       	std	Y+2, r25	; 0x02
     a78:	89 83       	std	Y+1, r24	; 0x01
     a7a:	6b 83       	std	Y+3, r22	; 0x03

	if (!TxBuffer.isFull()){
     a7c:	88 e3       	ldi	r24, 0x38	; 56
     a7e:	91 e0       	ldi	r25, 0x01	; 1
     a80:	0e 94 ae 01 	call	0x35c	; 0x35c <_ZN7CBufferIhLi10EE6isFullEv>
     a84:	98 2f       	mov	r25, r24
     a86:	81 e0       	ldi	r24, 0x01	; 1
     a88:	89 27       	eor	r24, r25
     a8a:	88 23       	and	r24, r24
     a8c:	c1 f0       	breq	.+48     	; 0xabe <_ZN5Uart17PutCharEh+0x54>
		TxBuffer.Put(c);
     a8e:	88 e3       	ldi	r24, 0x38	; 56
     a90:	91 e0       	ldi	r25, 0x01	; 1
     a92:	9e 01       	movw	r18, r28
     a94:	2d 5f       	subi	r18, 0xFD	; 253
     a96:	3f 4f       	sbci	r19, 0xFF	; 255
     a98:	b9 01       	movw	r22, r18
     a9a:	0e 94 da 01 	call	0x3b4	; 0x3b4 <_ZN7CBufferIhLi10EE3PutERKh>
		m_txByte++;
     a9e:	e9 81       	ldd	r30, Y+1	; 0x01
     aa0:	fa 81       	ldd	r31, Y+2	; 0x02
     aa2:	80 81       	ld	r24, Z
     aa4:	91 81       	ldd	r25, Z+1	; 0x01
     aa6:	01 96       	adiw	r24, 0x01	; 1
     aa8:	e9 81       	ldd	r30, Y+1	; 0x01
     aaa:	fa 81       	ldd	r31, Y+2	; 0x02
     aac:	91 83       	std	Z+1, r25	; 0x01
     aae:	80 83       	st	Z, r24
		//UDR0 = 0x99;
		//_delay_ms(200);
		//UDR0 = c;
		//UCSR0B |= (1 << UDRIE0);
		UART_CONTROL |= (1 << UDRIE);
     ab0:	a9 ec       	ldi	r26, 0xC9	; 201
     ab2:	b0 e0       	ldi	r27, 0x00	; 0
     ab4:	e9 ec       	ldi	r30, 0xC9	; 201
     ab6:	f0 e0       	ldi	r31, 0x00	; 0
     ab8:	80 81       	ld	r24, Z
     aba:	80 62       	ori	r24, 0x20	; 32
     abc:	8c 93       	st	X, r24
	//	UART0_CONTROL |=(1<<UDRIE0);
	}else{
	//	return false;
	}
	//return true;
}
     abe:	0f 90       	pop	r0
     ac0:	0f 90       	pop	r0
     ac2:	0f 90       	pop	r0
     ac4:	cf 91       	pop	r28
     ac6:	df 91       	pop	r29
     ac8:	08 95       	ret

00000aca <_ZN5Uart15writeEh>:
	SetBaudRate(baudrate);
	m_txByte = 0;
	m_rxByte = 0;
	m_error =0;
}
void Uart1::write(uint8_t c){PutChar(c);}
     aca:	df 93       	push	r29
     acc:	cf 93       	push	r28
     ace:	00 d0       	rcall	.+0      	; 0xad0 <_ZN5Uart15writeEh+0x6>
     ad0:	0f 92       	push	r0
     ad2:	cd b7       	in	r28, 0x3d	; 61
     ad4:	de b7       	in	r29, 0x3e	; 62
     ad6:	9a 83       	std	Y+2, r25	; 0x02
     ad8:	89 83       	std	Y+1, r24	; 0x01
     ada:	6b 83       	std	Y+3, r22	; 0x03
     adc:	89 81       	ldd	r24, Y+1	; 0x01
     ade:	9a 81       	ldd	r25, Y+2	; 0x02
     ae0:	6b 81       	ldd	r22, Y+3	; 0x03
     ae2:	0e 94 35 05 	call	0xa6a	; 0xa6a <_ZN5Uart17PutCharEh>
     ae6:	0f 90       	pop	r0
     ae8:	0f 90       	pop	r0
     aea:	0f 90       	pop	r0
     aec:	cf 91       	pop	r28
     aee:	df 91       	pop	r29
     af0:	08 95       	ret
     af2:	df 93       	push	r29
     af4:	cf 93       	push	r28
     af6:	00 d0       	rcall	.+0      	; 0xaf8 <_ZN5Uart15writeEh+0x2e>
     af8:	00 d0       	rcall	.+0      	; 0xafa <_ZN5Uart15writeEh+0x30>
     afa:	0f 92       	push	r0
     afc:	cd b7       	in	r28, 0x3d	; 61
     afe:	de b7       	in	r29, 0x3e	; 62
     b00:	9a 83       	std	Y+2, r25	; 0x02
     b02:	89 83       	std	Y+1, r24	; 0x01
     b04:	7c 83       	std	Y+4, r23	; 0x04
     b06:	6b 83       	std	Y+3, r22	; 0x03
     b08:	89 81       	ldd	r24, Y+1	; 0x01
     b0a:	9a 81       	ldd	r25, Y+2	; 0x02
     b0c:	0e 94 72 01 	call	0x2e4	; 0x2e4 <_ZN7CBufferIhLi10EE7isEmptyEv>
     b10:	88 23       	and	r24, r24
     b12:	11 f0       	breq	.+4      	; 0xb18 <_ZN5Uart15writeEh+0x4e>
     b14:	1d 82       	std	Y+5, r1	; 0x05
     b16:	19 c0       	rjmp	.+50     	; 0xb4a <_ZN5Uart15writeEh+0x80>
     b18:	e9 81       	ldd	r30, Y+1	; 0x01
     b1a:	fa 81       	ldd	r31, Y+2	; 0x02
     b1c:	25 85       	ldd	r18, Z+13	; 0x0d
     b1e:	36 85       	ldd	r19, Z+14	; 0x0e
     b20:	89 81       	ldd	r24, Y+1	; 0x01
     b22:	9a 81       	ldd	r25, Y+2	; 0x02
     b24:	fc 01       	movw	r30, r24
     b26:	e2 0f       	add	r30, r18
     b28:	f3 1f       	adc	r31, r19
     b2a:	80 81       	ld	r24, Z
     b2c:	eb 81       	ldd	r30, Y+3	; 0x03
     b2e:	fc 81       	ldd	r31, Y+4	; 0x04
     b30:	80 83       	st	Z, r24
     b32:	89 81       	ldd	r24, Y+1	; 0x01
     b34:	9a 81       	ldd	r25, Y+2	; 0x02
     b36:	9c 01       	movw	r18, r24
     b38:	23 5f       	subi	r18, 0xF3	; 243
     b3a:	3f 4f       	sbci	r19, 0xFF	; 255
     b3c:	89 81       	ldd	r24, Y+1	; 0x01
     b3e:	9a 81       	ldd	r25, Y+2	; 0x02
     b40:	b9 01       	movw	r22, r18
     b42:	0e 94 8f 01 	call	0x31e	; 0x31e <_ZN7CBufferIhLi10EE3IncERi>
     b46:	81 e0       	ldi	r24, 0x01	; 1
     b48:	8d 83       	std	Y+5, r24	; 0x05
     b4a:	8d 81       	ldd	r24, Y+5	; 0x05
     b4c:	0f 90       	pop	r0
     b4e:	0f 90       	pop	r0
     b50:	0f 90       	pop	r0
     b52:	0f 90       	pop	r0
     b54:	0f 90       	pop	r0
     b56:	cf 91       	pop	r28
     b58:	df 91       	pop	r29
     b5a:	08 95       	ret

00000b5c <__vector_33>:

void Uart1::GetIntStat(uint16_t &c){
	c= m_txByte;
}

ISR(USART1_UDRE_vect)
     b5c:	1f 92       	push	r1
     b5e:	0f 92       	push	r0
     b60:	0f b6       	in	r0, 0x3f	; 63
     b62:	0f 92       	push	r0
     b64:	00 90 5b 00 	lds	r0, 0x005B
     b68:	0f 92       	push	r0
     b6a:	11 24       	eor	r1, r1
     b6c:	2f 93       	push	r18
     b6e:	3f 93       	push	r19
     b70:	4f 93       	push	r20
     b72:	5f 93       	push	r21
     b74:	6f 93       	push	r22
     b76:	7f 93       	push	r23
     b78:	8f 93       	push	r24
     b7a:	9f 93       	push	r25
     b7c:	af 93       	push	r26
     b7e:	bf 93       	push	r27
     b80:	ef 93       	push	r30
     b82:	ff 93       	push	r31
     b84:	df 93       	push	r29
     b86:	cf 93       	push	r28
     b88:	0f 92       	push	r0
     b8a:	cd b7       	in	r28, 0x3d	; 61
     b8c:	de b7       	in	r29, 0x3e	; 62
{
	uint8_t c;
	if (!TxBuffer.isEmpty()){
     b8e:	88 e3       	ldi	r24, 0x38	; 56
     b90:	91 e0       	ldi	r25, 0x01	; 1
     b92:	0e 94 72 01 	call	0x2e4	; 0x2e4 <_ZN7CBufferIhLi10EE7isEmptyEv>
     b96:	98 2f       	mov	r25, r24
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	89 27       	eor	r24, r25
     b9c:	88 23       	and	r24, r24
     b9e:	69 f0       	breq	.+26     	; 0xbba <__vector_33+0x5e>
		TxBuffer.Get(c);
     ba0:	88 e3       	ldi	r24, 0x38	; 56
     ba2:	91 e0       	ldi	r25, 0x01	; 1
     ba4:	9e 01       	movw	r18, r28
     ba6:	2f 5f       	subi	r18, 0xFF	; 255
     ba8:	3f 4f       	sbci	r19, 0xFF	; 255
     baa:	b9 01       	movw	r22, r18
     bac:	0e 94 8f 02 	call	0x51e	; 0x51e <_ZN7CBufferIhLi10EE3GetERh>
		UDR = c;
     bb0:	ee ec       	ldi	r30, 0xCE	; 206
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
     bb4:	89 81       	ldd	r24, Y+1	; 0x01
     bb6:	80 83       	st	Z, r24
     bb8:	07 c0       	rjmp	.+14     	; 0xbc8 <__vector_33+0x6c>
	}else{
		// transmission finished, disable UDRE interrupt
		//UCSR0B &= ~(1 << UDRIE0);
		UART_CONTROL &= ~(1 << UDRIE);
     bba:	a9 ec       	ldi	r26, 0xC9	; 201
     bbc:	b0 e0       	ldi	r27, 0x00	; 0
     bbe:	e9 ec       	ldi	r30, 0xC9	; 201
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	80 81       	ld	r24, Z
     bc4:	8f 7d       	andi	r24, 0xDF	; 223
     bc6:	8c 93       	st	X, r24
	}
}
     bc8:	0f 90       	pop	r0
     bca:	cf 91       	pop	r28
     bcc:	df 91       	pop	r29
     bce:	ff 91       	pop	r31
     bd0:	ef 91       	pop	r30
     bd2:	bf 91       	pop	r27
     bd4:	af 91       	pop	r26
     bd6:	9f 91       	pop	r25
     bd8:	8f 91       	pop	r24
     bda:	7f 91       	pop	r23
     bdc:	6f 91       	pop	r22
     bde:	5f 91       	pop	r21
     be0:	4f 91       	pop	r20
     be2:	3f 91       	pop	r19
     be4:	2f 91       	pop	r18
     be6:	0f 90       	pop	r0
     be8:	00 92 5b 00 	sts	0x005B, r0
     bec:	0f 90       	pop	r0
     bee:	0f be       	out	0x3f, r0	; 63
     bf0:	0f 90       	pop	r0
     bf2:	1f 90       	pop	r1
     bf4:	18 95       	reti

00000bf6 <_ZN5Uart17GetCharERh>:
	}else{
	//	return false;
	}
	//return true;
}
bool Uart1::GetChar(uint8_t &c)
     bf6:	df 93       	push	r29
     bf8:	cf 93       	push	r28
     bfa:	00 d0       	rcall	.+0      	; 0xbfc <_ZN5Uart17GetCharERh+0x6>
     bfc:	0f 92       	push	r0
     bfe:	cd b7       	in	r28, 0x3d	; 61
     c00:	de b7       	in	r29, 0x3e	; 62
     c02:	9a 83       	std	Y+2, r25	; 0x02
     c04:	89 83       	std	Y+1, r24	; 0x01
{
	if (RxBuffer.isEmpty()) {
     c06:	87 e4       	ldi	r24, 0x47	; 71
     c08:	91 e0       	ldi	r25, 0x01	; 1
     c0a:	0e 94 72 01 	call	0x2e4	; 0x2e4 <_ZN7CBufferIhLi10EE7isEmptyEv>
     c0e:	88 23       	and	r24, r24
     c10:	11 f0       	breq	.+4      	; 0xc16 <_ZN5Uart17GetCharERh+0x20>
		return false;
     c12:	1b 82       	std	Y+3, r1	; 0x03
     c14:	09 c0       	rjmp	.+18     	; 0xc28 <_ZN5Uart17GetCharERh+0x32>
	}
	else {
		RxBuffer.Get(c);
     c16:	87 e4       	ldi	r24, 0x47	; 71
     c18:	91 e0       	ldi	r25, 0x01	; 1
     c1a:	29 81       	ldd	r18, Y+1	; 0x01
     c1c:	3a 81       	ldd	r19, Y+2	; 0x02
     c1e:	b9 01       	movw	r22, r18
     c20:	0e 94 8f 02 	call	0x51e	; 0x51e <_ZN7CBufferIhLi10EE3GetERh>
//		m_txByte++;
		//RxBuffer.pop();

		return true;
     c24:	81 e0       	ldi	r24, 0x01	; 1
     c26:	8b 83       	std	Y+3, r24	; 0x03
     c28:	8b 81       	ldd	r24, Y+3	; 0x03
	}
}
     c2a:	0f 90       	pop	r0
     c2c:	0f 90       	pop	r0
     c2e:	0f 90       	pop	r0
     c30:	cf 91       	pop	r28
     c32:	df 91       	pop	r29
     c34:	08 95       	ret

00000c36 <_Z41__static_initialization_and_destruction_0ii>:

	uint8_t data = UDR;
	RxBuffer.Put(data);
//	m_rxByte++;
	//UDR0 = 0x99;
}
     c36:	df 93       	push	r29
     c38:	cf 93       	push	r28
     c3a:	00 d0       	rcall	.+0      	; 0xc3c <_Z41__static_initialization_and_destruction_0ii+0x6>
     c3c:	00 d0       	rcall	.+0      	; 0xc3e <_Z41__static_initialization_and_destruction_0ii+0x8>
     c3e:	cd b7       	in	r28, 0x3d	; 61
     c40:	de b7       	in	r29, 0x3e	; 62
     c42:	9a 83       	std	Y+2, r25	; 0x02
     c44:	89 83       	std	Y+1, r24	; 0x01
     c46:	7c 83       	std	Y+4, r23	; 0x04
     c48:	6b 83       	std	Y+3, r22	; 0x03
     c4a:	89 81       	ldd	r24, Y+1	; 0x01
     c4c:	9a 81       	ldd	r25, Y+2	; 0x02
     c4e:	81 30       	cpi	r24, 0x01	; 1
     c50:	91 05       	cpc	r25, r1
     c52:	71 f4       	brne	.+28     	; 0xc70 <_Z41__static_initialization_and_destruction_0ii+0x3a>
     c54:	8b 81       	ldd	r24, Y+3	; 0x03
     c56:	9c 81       	ldd	r25, Y+4	; 0x04
     c58:	2f ef       	ldi	r18, 0xFF	; 255
     c5a:	8f 3f       	cpi	r24, 0xFF	; 255
     c5c:	92 07       	cpc	r25, r18
     c5e:	41 f4       	brne	.+16     	; 0xc70 <_Z41__static_initialization_and_destruction_0ii+0x3a>
#include <avr/io.h>
#include <avr/interrupt.h>

//#if defined USART0_UDRE_vect

static CBuffer<uint8_t,10> TxBuffer;
     c60:	88 e3       	ldi	r24, 0x38	; 56
     c62:	91 e0       	ldi	r25, 0x01	; 1
     c64:	0e 94 5e 01 	call	0x2bc	; 0x2bc <_ZN7CBufferIhLi10EEC1Ev>
static CBuffer<uint8_t,10> RxBuffer;
     c68:	87 e4       	ldi	r24, 0x47	; 71
     c6a:	91 e0       	ldi	r25, 0x01	; 1
     c6c:	0e 94 5e 01 	call	0x2bc	; 0x2bc <_ZN7CBufferIhLi10EEC1Ev>

	uint8_t data = UDR;
	RxBuffer.Put(data);
//	m_rxByte++;
	//UDR0 = 0x99;
}
     c70:	0f 90       	pop	r0
     c72:	0f 90       	pop	r0
     c74:	0f 90       	pop	r0
     c76:	0f 90       	pop	r0
     c78:	cf 91       	pop	r28
     c7a:	df 91       	pop	r29
     c7c:	08 95       	ret

00000c7e <_GLOBAL__I__ZN5Uart1C2Em>:
     c7e:	df 93       	push	r29
     c80:	cf 93       	push	r28
     c82:	cd b7       	in	r28, 0x3d	; 61
     c84:	de b7       	in	r29, 0x3e	; 62
     c86:	81 e0       	ldi	r24, 0x01	; 1
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	6f ef       	ldi	r22, 0xFF	; 255
     c8c:	7f ef       	ldi	r23, 0xFF	; 255
     c8e:	0e 94 1b 06 	call	0xc36	; 0xc36 <_Z41__static_initialization_and_destruction_0ii>
     c92:	cf 91       	pop	r28
     c94:	df 91       	pop	r29
     c96:	08 95       	ret

00000c98 <_ZN9IOWrapperI5Uart0EC1ERS0_>:
template<typename T>
class IOWrapper     //: public IODevice
{
	T &m_device;
public:
	IOWrapper( T&  device):  m_device(device){}
     c98:	df 93       	push	r29
     c9a:	cf 93       	push	r28
     c9c:	00 d0       	rcall	.+0      	; 0xc9e <_ZN9IOWrapperI5Uart0EC1ERS0_+0x6>
     c9e:	00 d0       	rcall	.+0      	; 0xca0 <_ZN9IOWrapperI5Uart0EC1ERS0_+0x8>
     ca0:	cd b7       	in	r28, 0x3d	; 61
     ca2:	de b7       	in	r29, 0x3e	; 62
     ca4:	9a 83       	std	Y+2, r25	; 0x02
     ca6:	89 83       	std	Y+1, r24	; 0x01
     ca8:	7c 83       	std	Y+4, r23	; 0x04
     caa:	6b 83       	std	Y+3, r22	; 0x03
     cac:	e9 81       	ldd	r30, Y+1	; 0x01
     cae:	fa 81       	ldd	r31, Y+2	; 0x02
     cb0:	8e e0       	ldi	r24, 0x0E	; 14
     cb2:	91 e0       	ldi	r25, 0x01	; 1
     cb4:	91 83       	std	Z+1, r25	; 0x01
     cb6:	80 83       	st	Z, r24
     cb8:	e9 81       	ldd	r30, Y+1	; 0x01
     cba:	fa 81       	ldd	r31, Y+2	; 0x02
     cbc:	8b 81       	ldd	r24, Y+3	; 0x03
     cbe:	9c 81       	ldd	r25, Y+4	; 0x04
     cc0:	93 83       	std	Z+3, r25	; 0x03
     cc2:	82 83       	std	Z+2, r24	; 0x02
     cc4:	0f 90       	pop	r0
     cc6:	0f 90       	pop	r0
     cc8:	0f 90       	pop	r0
     cca:	0f 90       	pop	r0
     ccc:	cf 91       	pop	r28
     cce:	df 91       	pop	r29
     cd0:	08 95       	ret

00000cd2 <_ZN9IOWrapperI5Uart0E5writeEh>:

	virtual void write(uint8_t c){
     cd2:	df 93       	push	r29
     cd4:	cf 93       	push	r28
     cd6:	00 d0       	rcall	.+0      	; 0xcd8 <_ZN9IOWrapperI5Uart0E5writeEh+0x6>
     cd8:	0f 92       	push	r0
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
     cde:	9a 83       	std	Y+2, r25	; 0x02
     ce0:	89 83       	std	Y+1, r24	; 0x01
     ce2:	6b 83       	std	Y+3, r22	; 0x03
		m_device.write(c);
     ce4:	e9 81       	ldd	r30, Y+1	; 0x01
     ce6:	fa 81       	ldd	r31, Y+2	; 0x02
     ce8:	82 81       	ldd	r24, Z+2	; 0x02
     cea:	93 81       	ldd	r25, Z+3	; 0x03
     cec:	6b 81       	ldd	r22, Y+3	; 0x03
     cee:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <_ZN5Uart05writeEh>
	}
     cf2:	0f 90       	pop	r0
     cf4:	0f 90       	pop	r0
     cf6:	0f 90       	pop	r0
     cf8:	cf 91       	pop	r28
     cfa:	df 91       	pop	r29
     cfc:	08 95       	ret

00000cfe <_ZN9IOWrapperI5Uart0E5writeEPKc>:

	virtual void write(const char *s){
     cfe:	df 93       	push	r29
     d00:	cf 93       	push	r28
     d02:	00 d0       	rcall	.+0      	; 0xd04 <_ZN9IOWrapperI5Uart0E5writeEPKc+0x6>
     d04:	00 d0       	rcall	.+0      	; 0xd06 <_ZN9IOWrapperI5Uart0E5writeEPKc+0x8>
     d06:	00 d0       	rcall	.+0      	; 0xd08 <_ZN9IOWrapperI5Uart0E5writeEPKc+0xa>
     d08:	cd b7       	in	r28, 0x3d	; 61
     d0a:	de b7       	in	r29, 0x3e	; 62
     d0c:	9b 83       	std	Y+3, r25	; 0x03
     d0e:	8a 83       	std	Y+2, r24	; 0x02
     d10:	7d 83       	std	Y+5, r23	; 0x05
     d12:	6c 83       	std	Y+4, r22	; 0x04
     d14:	07 c0       	rjmp	.+14     	; 0xd24 <_ZN9IOWrapperI5Uart0E5writeEPKc+0x26>
		char c;
		while ((c = *s++)){
			m_device.write(static_cast<uint8_t>(c));
     d16:	ea 81       	ldd	r30, Y+2	; 0x02
     d18:	fb 81       	ldd	r31, Y+3	; 0x03
     d1a:	82 81       	ldd	r24, Z+2	; 0x02
     d1c:	93 81       	ldd	r25, Z+3	; 0x03
     d1e:	69 81       	ldd	r22, Y+1	; 0x01
     d20:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <_ZN5Uart05writeEh>
		m_device.write(c);
	}

	virtual void write(const char *s){
		char c;
		while ((c = *s++)){
     d24:	ec 81       	ldd	r30, Y+4	; 0x04
     d26:	fd 81       	ldd	r31, Y+5	; 0x05
     d28:	80 81       	ld	r24, Z
     d2a:	89 83       	std	Y+1, r24	; 0x01
     d2c:	89 81       	ldd	r24, Y+1	; 0x01
     d2e:	8e 83       	std	Y+6, r24	; 0x06
     d30:	8e 81       	ldd	r24, Y+6	; 0x06
     d32:	88 23       	and	r24, r24
     d34:	11 f0       	breq	.+4      	; 0xd3a <_ZN9IOWrapperI5Uart0E5writeEPKc+0x3c>
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	8e 83       	std	Y+6, r24	; 0x06
     d3a:	8e 81       	ldd	r24, Y+6	; 0x06
     d3c:	2c 81       	ldd	r18, Y+4	; 0x04
     d3e:	3d 81       	ldd	r19, Y+5	; 0x05
     d40:	2f 5f       	subi	r18, 0xFF	; 255
     d42:	3f 4f       	sbci	r19, 0xFF	; 255
     d44:	3d 83       	std	Y+5, r19	; 0x05
     d46:	2c 83       	std	Y+4, r18	; 0x04
     d48:	88 23       	and	r24, r24
     d4a:	29 f7       	brne	.-54     	; 0xd16 <_ZN9IOWrapperI5Uart0E5writeEPKc+0x18>
			m_device.write(static_cast<uint8_t>(c));
		}

	}
     d4c:	26 96       	adiw	r28, 0x06	; 6
     d4e:	0f b6       	in	r0, 0x3f	; 63
     d50:	f8 94       	cli
     d52:	de bf       	out	0x3e, r29	; 62
     d54:	0f be       	out	0x3f, r0	; 63
     d56:	cd bf       	out	0x3d, r28	; 61
     d58:	cf 91       	pop	r28
     d5a:	df 91       	pop	r29
     d5c:	08 95       	ret

00000d5e <main>:
	pWhere->write('a');
}
 */

int
main()
     d5e:	df 93       	push	r29
     d60:	cf 93       	push	r28
     d62:	cd b7       	in	r28, 0x3d	; 61
     d64:	de b7       	in	r29, 0x3e	; 62
     d66:	ac 97       	sbiw	r28, 0x2c	; 44
     d68:	0f b6       	in	r0, 0x3f	; 63
     d6a:	f8 94       	cli
     d6c:	de bf       	out	0x3e, r29	; 62
     d6e:	0f be       	out	0x3f, r0	; 63
     d70:	cd bf       	out	0x3d, r28	; 61
{
	Uart0 uart0(38400);
     d72:	ce 01       	movw	r24, r28
     d74:	4d 96       	adiw	r24, 0x1d	; 29
     d76:	40 e0       	ldi	r20, 0x00	; 0
     d78:	56 e9       	ldi	r21, 0x96	; 150
     d7a:	60 e0       	ldi	r22, 0x00	; 0
     d7c:	70 e0       	ldi	r23, 0x00	; 0
     d7e:	0e 94 19 01 	call	0x232	; 0x232 <_ZN5Uart0C1Em>
	Uart1 uart1(38400);
     d82:	ce 01       	movw	r24, r28
     d84:	83 96       	adiw	r24, 0x23	; 35
     d86:	40 e0       	ldi	r20, 0x00	; 0
     d88:	56 e9       	ldi	r21, 0x96	; 150
     d8a:	60 e0       	ldi	r22, 0x00	; 0
     d8c:	70 e0       	ldi	r23, 0x00	; 0
     d8e:	0e 94 03 04 	call	0x806	; 0x806 <_ZN5Uart1C1Em>
//	output * o;
//	o = &uart;
//	o->write('a');
//	foo (&uart);
	// Enable interrupts, this is needed for every buffered UART
	sei();
     d92:	78 94       	sei
	
	// Create a IOStream for complex formatting tasks
	IOWrapper<Uart0> device(uart0);
     d94:	ce 01       	movw	r24, r28
     d96:	89 96       	adiw	r24, 0x29	; 41
     d98:	9e 01       	movw	r18, r28
     d9a:	23 5e       	subi	r18, 0xE3	; 227
     d9c:	3f 4f       	sbci	r19, 0xFF	; 255
     d9e:	b9 01       	movw	r22, r18
     da0:	0e 94 4c 06 	call	0xc98	; 0xc98 <_ZN9IOWrapperI5Uart0EC1ERS0_>
	// the number formated as ASCII text.
	//stream << 24 << " is a nice number!" << xpcc::endl;
	
	while (1)
	{
		device.write('B');
     da4:	ce 01       	movw	r24, r28
     da6:	89 96       	adiw	r24, 0x29	; 41
     da8:	62 e4       	ldi	r22, 0x42	; 66
     daa:	0e 94 69 06 	call	0xcd2	; 0xcd2 <_ZN9IOWrapperI5Uart0E5writeEh>
     dae:	80 e0       	ldi	r24, 0x00	; 0
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	a8 e4       	ldi	r26, 0x48	; 72
     db4:	b3 e4       	ldi	r27, 0x43	; 67
     db6:	89 8f       	std	Y+25, r24	; 0x19
     db8:	9a 8f       	std	Y+26, r25	; 0x1a
     dba:	ab 8f       	std	Y+27, r26	; 0x1b
     dbc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dbe:	69 8d       	ldd	r22, Y+25	; 0x19
     dc0:	7a 8d       	ldd	r23, Y+26	; 0x1a
     dc2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     dc4:	9c 8d       	ldd	r25, Y+28	; 0x1c
     dc6:	26 e6       	ldi	r18, 0x66	; 102
     dc8:	36 e6       	ldi	r19, 0x66	; 102
     dca:	46 e6       	ldi	r20, 0x66	; 102
     dcc:	55 e4       	ldi	r21, 0x45	; 69
     dce:	0e 94 99 09 	call	0x1332	; 0x1332 <__mulsf3>
     dd2:	dc 01       	movw	r26, r24
     dd4:	cb 01       	movw	r24, r22
     dd6:	8d 8b       	std	Y+21, r24	; 0x15
     dd8:	9e 8b       	std	Y+22, r25	; 0x16
     dda:	af 8b       	std	Y+23, r26	; 0x17
     ddc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     dde:	6d 89       	ldd	r22, Y+21	; 0x15
     de0:	7e 89       	ldd	r23, Y+22	; 0x16
     de2:	8f 89       	ldd	r24, Y+23	; 0x17
     de4:	98 8d       	ldd	r25, Y+24	; 0x18
     de6:	20 e0       	ldi	r18, 0x00	; 0
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	40 e8       	ldi	r20, 0x80	; 128
     dec:	5f e3       	ldi	r21, 0x3F	; 63
     dee:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <__ltsf2>
     df2:	88 23       	and	r24, r24
     df4:	2c f4       	brge	.+10     	; 0xe00 <main+0xa2>
		__ticks = 1;
     df6:	81 e0       	ldi	r24, 0x01	; 1
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	9c 8b       	std	Y+20, r25	; 0x14
     dfc:	8b 8b       	std	Y+19, r24	; 0x13
     dfe:	3f c0       	rjmp	.+126    	; 0xe7e <main+0x120>
	else if (__tmp > 65535)
     e00:	6d 89       	ldd	r22, Y+21	; 0x15
     e02:	7e 89       	ldd	r23, Y+22	; 0x16
     e04:	8f 89       	ldd	r24, Y+23	; 0x17
     e06:	98 8d       	ldd	r25, Y+24	; 0x18
     e08:	20 e0       	ldi	r18, 0x00	; 0
     e0a:	3f ef       	ldi	r19, 0xFF	; 255
     e0c:	4f e7       	ldi	r20, 0x7F	; 127
     e0e:	57 e4       	ldi	r21, 0x47	; 71
     e10:	0e 94 93 0a 	call	0x1526	; 0x1526 <__gtsf2>
     e14:	18 16       	cp	r1, r24
     e16:	4c f5       	brge	.+82     	; 0xe6a <main+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e18:	69 8d       	ldd	r22, Y+25	; 0x19
     e1a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e1c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e1e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e20:	20 e0       	ldi	r18, 0x00	; 0
     e22:	30 e0       	ldi	r19, 0x00	; 0
     e24:	40 e2       	ldi	r20, 0x20	; 32
     e26:	51 e4       	ldi	r21, 0x41	; 65
     e28:	0e 94 99 09 	call	0x1332	; 0x1332 <__mulsf3>
     e2c:	dc 01       	movw	r26, r24
     e2e:	cb 01       	movw	r24, r22
     e30:	bc 01       	movw	r22, r24
     e32:	cd 01       	movw	r24, r26
     e34:	0e 94 c3 07 	call	0xf86	; 0xf86 <__fixunssfsi>
     e38:	dc 01       	movw	r26, r24
     e3a:	cb 01       	movw	r24, r22
     e3c:	9c 8b       	std	Y+20, r25	; 0x14
     e3e:	8b 8b       	std	Y+19, r24	; 0x13
     e40:	0f c0       	rjmp	.+30     	; 0xe60 <main+0x102>
     e42:	80 e7       	ldi	r24, 0x70	; 112
     e44:	91 e0       	ldi	r25, 0x01	; 1
     e46:	9a 8b       	std	Y+18, r25	; 0x12
     e48:	89 8b       	std	Y+17, r24	; 0x11
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
     e4a:	89 89       	ldd	r24, Y+17	; 0x11
     e4c:	9a 89       	ldd	r25, Y+18	; 0x12
     e4e:	01 97       	sbiw	r24, 0x01	; 1
     e50:	f1 f7       	brne	.-4      	; 0xe4e <main+0xf0>
     e52:	9a 8b       	std	Y+18, r25	; 0x12
     e54:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e56:	8b 89       	ldd	r24, Y+19	; 0x13
     e58:	9c 89       	ldd	r25, Y+20	; 0x14
     e5a:	01 97       	sbiw	r24, 0x01	; 1
     e5c:	9c 8b       	std	Y+20, r25	; 0x14
     e5e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e60:	8b 89       	ldd	r24, Y+19	; 0x13
     e62:	9c 89       	ldd	r25, Y+20	; 0x14
     e64:	00 97       	sbiw	r24, 0x00	; 0
     e66:	69 f7       	brne	.-38     	; 0xe42 <main+0xe4>
     e68:	14 c0       	rjmp	.+40     	; 0xe92 <main+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e6a:	6d 89       	ldd	r22, Y+21	; 0x15
     e6c:	7e 89       	ldd	r23, Y+22	; 0x16
     e6e:	8f 89       	ldd	r24, Y+23	; 0x17
     e70:	98 8d       	ldd	r25, Y+24	; 0x18
     e72:	0e 94 c3 07 	call	0xf86	; 0xf86 <__fixunssfsi>
     e76:	dc 01       	movw	r26, r24
     e78:	cb 01       	movw	r24, r22
     e7a:	9c 8b       	std	Y+20, r25	; 0x14
     e7c:	8b 8b       	std	Y+19, r24	; 0x13
     e7e:	8b 89       	ldd	r24, Y+19	; 0x13
     e80:	9c 89       	ldd	r25, Y+20	; 0x14
     e82:	98 8b       	std	Y+16, r25	; 0x10
     e84:	8f 87       	std	Y+15, r24	; 0x0f
     e86:	8f 85       	ldd	r24, Y+15	; 0x0f
     e88:	98 89       	ldd	r25, Y+16	; 0x10
     e8a:	01 97       	sbiw	r24, 0x01	; 1
     e8c:	f1 f7       	brne	.-4      	; 0xe8a <main+0x12c>
     e8e:	98 8b       	std	Y+16, r25	; 0x10
     e90:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(200);
		device.write("- Hello -");
     e92:	ce 01       	movw	r24, r28
     e94:	89 96       	adiw	r24, 0x29	; 41
     e96:	20 e0       	ldi	r18, 0x00	; 0
     e98:	31 e0       	ldi	r19, 0x01	; 1
     e9a:	b9 01       	movw	r22, r18
     e9c:	0e 94 7f 06 	call	0xcfe	; 0xcfe <_ZN9IOWrapperI5Uart0E5writeEPKc>
     ea0:	80 e0       	ldi	r24, 0x00	; 0
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	a8 e4       	ldi	r26, 0x48	; 72
     ea6:	b3 e4       	ldi	r27, 0x43	; 67
     ea8:	8b 87       	std	Y+11, r24	; 0x0b
     eaa:	9c 87       	std	Y+12, r25	; 0x0c
     eac:	ad 87       	std	Y+13, r26	; 0x0d
     eae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     eb0:	6b 85       	ldd	r22, Y+11	; 0x0b
     eb2:	7c 85       	ldd	r23, Y+12	; 0x0c
     eb4:	8d 85       	ldd	r24, Y+13	; 0x0d
     eb6:	9e 85       	ldd	r25, Y+14	; 0x0e
     eb8:	26 e6       	ldi	r18, 0x66	; 102
     eba:	36 e6       	ldi	r19, 0x66	; 102
     ebc:	46 e6       	ldi	r20, 0x66	; 102
     ebe:	55 e4       	ldi	r21, 0x45	; 69
     ec0:	0e 94 99 09 	call	0x1332	; 0x1332 <__mulsf3>
     ec4:	dc 01       	movw	r26, r24
     ec6:	cb 01       	movw	r24, r22
     ec8:	8f 83       	std	Y+7, r24	; 0x07
     eca:	98 87       	std	Y+8, r25	; 0x08
     ecc:	a9 87       	std	Y+9, r26	; 0x09
     ece:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ed0:	6f 81       	ldd	r22, Y+7	; 0x07
     ed2:	78 85       	ldd	r23, Y+8	; 0x08
     ed4:	89 85       	ldd	r24, Y+9	; 0x09
     ed6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ed8:	20 e0       	ldi	r18, 0x00	; 0
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	40 e8       	ldi	r20, 0x80	; 128
     ede:	5f e3       	ldi	r21, 0x3F	; 63
     ee0:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <__ltsf2>
     ee4:	88 23       	and	r24, r24
     ee6:	2c f4       	brge	.+10     	; 0xef2 <main+0x194>
		__ticks = 1;
     ee8:	81 e0       	ldi	r24, 0x01	; 1
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	9e 83       	std	Y+6, r25	; 0x06
     eee:	8d 83       	std	Y+5, r24	; 0x05
     ef0:	3f c0       	rjmp	.+126    	; 0xf70 <main+0x212>
	else if (__tmp > 65535)
     ef2:	6f 81       	ldd	r22, Y+7	; 0x07
     ef4:	78 85       	ldd	r23, Y+8	; 0x08
     ef6:	89 85       	ldd	r24, Y+9	; 0x09
     ef8:	9a 85       	ldd	r25, Y+10	; 0x0a
     efa:	20 e0       	ldi	r18, 0x00	; 0
     efc:	3f ef       	ldi	r19, 0xFF	; 255
     efe:	4f e7       	ldi	r20, 0x7F	; 127
     f00:	57 e4       	ldi	r21, 0x47	; 71
     f02:	0e 94 93 0a 	call	0x1526	; 0x1526 <__gtsf2>
     f06:	18 16       	cp	r1, r24
     f08:	4c f5       	brge	.+82     	; 0xf5c <main+0x1fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f0a:	6b 85       	ldd	r22, Y+11	; 0x0b
     f0c:	7c 85       	ldd	r23, Y+12	; 0x0c
     f0e:	8d 85       	ldd	r24, Y+13	; 0x0d
     f10:	9e 85       	ldd	r25, Y+14	; 0x0e
     f12:	20 e0       	ldi	r18, 0x00	; 0
     f14:	30 e0       	ldi	r19, 0x00	; 0
     f16:	40 e2       	ldi	r20, 0x20	; 32
     f18:	51 e4       	ldi	r21, 0x41	; 65
     f1a:	0e 94 99 09 	call	0x1332	; 0x1332 <__mulsf3>
     f1e:	dc 01       	movw	r26, r24
     f20:	cb 01       	movw	r24, r22
     f22:	bc 01       	movw	r22, r24
     f24:	cd 01       	movw	r24, r26
     f26:	0e 94 c3 07 	call	0xf86	; 0xf86 <__fixunssfsi>
     f2a:	dc 01       	movw	r26, r24
     f2c:	cb 01       	movw	r24, r22
     f2e:	9e 83       	std	Y+6, r25	; 0x06
     f30:	8d 83       	std	Y+5, r24	; 0x05
     f32:	0f c0       	rjmp	.+30     	; 0xf52 <main+0x1f4>
     f34:	80 e7       	ldi	r24, 0x70	; 112
     f36:	91 e0       	ldi	r25, 0x01	; 1
     f38:	9c 83       	std	Y+4, r25	; 0x04
     f3a:	8b 83       	std	Y+3, r24	; 0x03
     f3c:	8b 81       	ldd	r24, Y+3	; 0x03
     f3e:	9c 81       	ldd	r25, Y+4	; 0x04
     f40:	01 97       	sbiw	r24, 0x01	; 1
     f42:	f1 f7       	brne	.-4      	; 0xf40 <main+0x1e2>
     f44:	9c 83       	std	Y+4, r25	; 0x04
     f46:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f48:	8d 81       	ldd	r24, Y+5	; 0x05
     f4a:	9e 81       	ldd	r25, Y+6	; 0x06
     f4c:	01 97       	sbiw	r24, 0x01	; 1
     f4e:	9e 83       	std	Y+6, r25	; 0x06
     f50:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f52:	8d 81       	ldd	r24, Y+5	; 0x05
     f54:	9e 81       	ldd	r25, Y+6	; 0x06
     f56:	00 97       	sbiw	r24, 0x00	; 0
     f58:	69 f7       	brne	.-38     	; 0xf34 <main+0x1d6>
     f5a:	24 cf       	rjmp	.-440    	; 0xda4 <main+0x46>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f5c:	6f 81       	ldd	r22, Y+7	; 0x07
     f5e:	78 85       	ldd	r23, Y+8	; 0x08
     f60:	89 85       	ldd	r24, Y+9	; 0x09
     f62:	9a 85       	ldd	r25, Y+10	; 0x0a
     f64:	0e 94 c3 07 	call	0xf86	; 0xf86 <__fixunssfsi>
     f68:	dc 01       	movw	r26, r24
     f6a:	cb 01       	movw	r24, r22
     f6c:	9e 83       	std	Y+6, r25	; 0x06
     f6e:	8d 83       	std	Y+5, r24	; 0x05
     f70:	8d 81       	ldd	r24, Y+5	; 0x05
     f72:	9e 81       	ldd	r25, Y+6	; 0x06
     f74:	9a 83       	std	Y+2, r25	; 0x02
     f76:	89 83       	std	Y+1, r24	; 0x01
     f78:	89 81       	ldd	r24, Y+1	; 0x01
     f7a:	9a 81       	ldd	r25, Y+2	; 0x02
     f7c:	01 97       	sbiw	r24, 0x01	; 1
     f7e:	f1 f7       	brne	.-4      	; 0xf7c <main+0x21e>
     f80:	9a 83       	std	Y+2, r25	; 0x02
     f82:	89 83       	std	Y+1, r24	; 0x01
     f84:	0f cf       	rjmp	.-482    	; 0xda4 <main+0x46>

00000f86 <__fixunssfsi>:
     f86:	ef 92       	push	r14
     f88:	ff 92       	push	r15
     f8a:	0f 93       	push	r16
     f8c:	1f 93       	push	r17
     f8e:	7b 01       	movw	r14, r22
     f90:	8c 01       	movw	r16, r24
     f92:	20 e0       	ldi	r18, 0x00	; 0
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	40 e0       	ldi	r20, 0x00	; 0
     f98:	5f e4       	ldi	r21, 0x4F	; 79
     f9a:	0e 94 c3 0a 	call	0x1586	; 0x1586 <__gesf2>
     f9e:	88 23       	and	r24, r24
     fa0:	8c f0       	brlt	.+34     	; 0xfc4 <__fixunssfsi+0x3e>
     fa2:	c8 01       	movw	r24, r16
     fa4:	b7 01       	movw	r22, r14
     fa6:	20 e0       	ldi	r18, 0x00	; 0
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	40 e0       	ldi	r20, 0x00	; 0
     fac:	5f e4       	ldi	r21, 0x4F	; 79
     fae:	0e 94 3b 09 	call	0x1276	; 0x1276 <__subsf3>
     fb2:	0e 94 23 0b 	call	0x1646	; 0x1646 <__fixsfsi>
     fb6:	9b 01       	movw	r18, r22
     fb8:	ac 01       	movw	r20, r24
     fba:	20 50       	subi	r18, 0x00	; 0
     fbc:	30 40       	sbci	r19, 0x00	; 0
     fbe:	40 40       	sbci	r20, 0x00	; 0
     fc0:	50 48       	sbci	r21, 0x80	; 128
     fc2:	06 c0       	rjmp	.+12     	; 0xfd0 <__fixunssfsi+0x4a>
     fc4:	c8 01       	movw	r24, r16
     fc6:	b7 01       	movw	r22, r14
     fc8:	0e 94 23 0b 	call	0x1646	; 0x1646 <__fixsfsi>
     fcc:	9b 01       	movw	r18, r22
     fce:	ac 01       	movw	r20, r24
     fd0:	b9 01       	movw	r22, r18
     fd2:	ca 01       	movw	r24, r20
     fd4:	1f 91       	pop	r17
     fd6:	0f 91       	pop	r16
     fd8:	ff 90       	pop	r15
     fda:	ef 90       	pop	r14
     fdc:	08 95       	ret

00000fde <_fpadd_parts>:
     fde:	a0 e0       	ldi	r26, 0x00	; 0
     fe0:	b0 e0       	ldi	r27, 0x00	; 0
     fe2:	e5 ef       	ldi	r30, 0xF5	; 245
     fe4:	f7 e0       	ldi	r31, 0x07	; 7
     fe6:	0c 94 66 0d 	jmp	0x1acc	; 0x1acc <__prologue_saves__>
     fea:	dc 01       	movw	r26, r24
     fec:	2b 01       	movw	r4, r22
     fee:	fa 01       	movw	r30, r20
     ff0:	9c 91       	ld	r25, X
     ff2:	92 30       	cpi	r25, 0x02	; 2
     ff4:	08 f4       	brcc	.+2      	; 0xff8 <_fpadd_parts+0x1a>
     ff6:	39 c1       	rjmp	.+626    	; 0x126a <__stack+0x16b>
     ff8:	eb 01       	movw	r28, r22
     ffa:	88 81       	ld	r24, Y
     ffc:	82 30       	cpi	r24, 0x02	; 2
     ffe:	08 f4       	brcc	.+2      	; 0x1002 <_fpadd_parts+0x24>
    1000:	33 c1       	rjmp	.+614    	; 0x1268 <__stack+0x169>
    1002:	94 30       	cpi	r25, 0x04	; 4
    1004:	69 f4       	brne	.+26     	; 0x1020 <_fpadd_parts+0x42>
    1006:	84 30       	cpi	r24, 0x04	; 4
    1008:	09 f0       	breq	.+2      	; 0x100c <_fpadd_parts+0x2e>
    100a:	2f c1       	rjmp	.+606    	; 0x126a <__stack+0x16b>
    100c:	11 96       	adiw	r26, 0x01	; 1
    100e:	9c 91       	ld	r25, X
    1010:	11 97       	sbiw	r26, 0x01	; 1
    1012:	89 81       	ldd	r24, Y+1	; 0x01
    1014:	98 17       	cp	r25, r24
    1016:	09 f4       	brne	.+2      	; 0x101a <_fpadd_parts+0x3c>
    1018:	28 c1       	rjmp	.+592    	; 0x126a <__stack+0x16b>
    101a:	a2 e1       	ldi	r26, 0x12	; 18
    101c:	b1 e0       	ldi	r27, 0x01	; 1
    101e:	25 c1       	rjmp	.+586    	; 0x126a <__stack+0x16b>
    1020:	84 30       	cpi	r24, 0x04	; 4
    1022:	09 f4       	brne	.+2      	; 0x1026 <_fpadd_parts+0x48>
    1024:	21 c1       	rjmp	.+578    	; 0x1268 <__stack+0x169>
    1026:	82 30       	cpi	r24, 0x02	; 2
    1028:	a9 f4       	brne	.+42     	; 0x1054 <_fpadd_parts+0x76>
    102a:	92 30       	cpi	r25, 0x02	; 2
    102c:	09 f0       	breq	.+2      	; 0x1030 <_fpadd_parts+0x52>
    102e:	1d c1       	rjmp	.+570    	; 0x126a <__stack+0x16b>
    1030:	9a 01       	movw	r18, r20
    1032:	ad 01       	movw	r20, r26
    1034:	88 e0       	ldi	r24, 0x08	; 8
    1036:	ea 01       	movw	r28, r20
    1038:	09 90       	ld	r0, Y+
    103a:	ae 01       	movw	r20, r28
    103c:	e9 01       	movw	r28, r18
    103e:	09 92       	st	Y+, r0
    1040:	9e 01       	movw	r18, r28
    1042:	81 50       	subi	r24, 0x01	; 1
    1044:	c1 f7       	brne	.-16     	; 0x1036 <_fpadd_parts+0x58>
    1046:	e2 01       	movw	r28, r4
    1048:	89 81       	ldd	r24, Y+1	; 0x01
    104a:	11 96       	adiw	r26, 0x01	; 1
    104c:	9c 91       	ld	r25, X
    104e:	89 23       	and	r24, r25
    1050:	81 83       	std	Z+1, r24	; 0x01
    1052:	08 c1       	rjmp	.+528    	; 0x1264 <__stack+0x165>
    1054:	92 30       	cpi	r25, 0x02	; 2
    1056:	09 f4       	brne	.+2      	; 0x105a <_fpadd_parts+0x7c>
    1058:	07 c1       	rjmp	.+526    	; 0x1268 <__stack+0x169>
    105a:	12 96       	adiw	r26, 0x02	; 2
    105c:	2d 90       	ld	r2, X+
    105e:	3c 90       	ld	r3, X
    1060:	13 97       	sbiw	r26, 0x03	; 3
    1062:	eb 01       	movw	r28, r22
    1064:	8a 81       	ldd	r24, Y+2	; 0x02
    1066:	9b 81       	ldd	r25, Y+3	; 0x03
    1068:	14 96       	adiw	r26, 0x04	; 4
    106a:	ad 90       	ld	r10, X+
    106c:	bd 90       	ld	r11, X+
    106e:	cd 90       	ld	r12, X+
    1070:	dc 90       	ld	r13, X
    1072:	17 97       	sbiw	r26, 0x07	; 7
    1074:	ec 80       	ldd	r14, Y+4	; 0x04
    1076:	fd 80       	ldd	r15, Y+5	; 0x05
    1078:	0e 81       	ldd	r16, Y+6	; 0x06
    107a:	1f 81       	ldd	r17, Y+7	; 0x07
    107c:	91 01       	movw	r18, r2
    107e:	28 1b       	sub	r18, r24
    1080:	39 0b       	sbc	r19, r25
    1082:	b9 01       	movw	r22, r18
    1084:	37 ff       	sbrs	r19, 7
    1086:	04 c0       	rjmp	.+8      	; 0x1090 <_fpadd_parts+0xb2>
    1088:	66 27       	eor	r22, r22
    108a:	77 27       	eor	r23, r23
    108c:	62 1b       	sub	r22, r18
    108e:	73 0b       	sbc	r23, r19
    1090:	60 32       	cpi	r22, 0x20	; 32
    1092:	71 05       	cpc	r23, r1
    1094:	0c f0       	brlt	.+2      	; 0x1098 <_fpadd_parts+0xba>
    1096:	61 c0       	rjmp	.+194    	; 0x115a <__stack+0x5b>
    1098:	12 16       	cp	r1, r18
    109a:	13 06       	cpc	r1, r19
    109c:	6c f5       	brge	.+90     	; 0x10f8 <_fpadd_parts+0x11a>
    109e:	37 01       	movw	r6, r14
    10a0:	48 01       	movw	r8, r16
    10a2:	06 2e       	mov	r0, r22
    10a4:	04 c0       	rjmp	.+8      	; 0x10ae <_fpadd_parts+0xd0>
    10a6:	96 94       	lsr	r9
    10a8:	87 94       	ror	r8
    10aa:	77 94       	ror	r7
    10ac:	67 94       	ror	r6
    10ae:	0a 94       	dec	r0
    10b0:	d2 f7       	brpl	.-12     	; 0x10a6 <_fpadd_parts+0xc8>
    10b2:	21 e0       	ldi	r18, 0x01	; 1
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	40 e0       	ldi	r20, 0x00	; 0
    10b8:	50 e0       	ldi	r21, 0x00	; 0
    10ba:	04 c0       	rjmp	.+8      	; 0x10c4 <_fpadd_parts+0xe6>
    10bc:	22 0f       	add	r18, r18
    10be:	33 1f       	adc	r19, r19
    10c0:	44 1f       	adc	r20, r20
    10c2:	55 1f       	adc	r21, r21
    10c4:	6a 95       	dec	r22
    10c6:	d2 f7       	brpl	.-12     	; 0x10bc <_fpadd_parts+0xde>
    10c8:	21 50       	subi	r18, 0x01	; 1
    10ca:	30 40       	sbci	r19, 0x00	; 0
    10cc:	40 40       	sbci	r20, 0x00	; 0
    10ce:	50 40       	sbci	r21, 0x00	; 0
    10d0:	2e 21       	and	r18, r14
    10d2:	3f 21       	and	r19, r15
    10d4:	40 23       	and	r20, r16
    10d6:	51 23       	and	r21, r17
    10d8:	21 15       	cp	r18, r1
    10da:	31 05       	cpc	r19, r1
    10dc:	41 05       	cpc	r20, r1
    10de:	51 05       	cpc	r21, r1
    10e0:	21 f0       	breq	.+8      	; 0x10ea <_fpadd_parts+0x10c>
    10e2:	21 e0       	ldi	r18, 0x01	; 1
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	40 e0       	ldi	r20, 0x00	; 0
    10e8:	50 e0       	ldi	r21, 0x00	; 0
    10ea:	79 01       	movw	r14, r18
    10ec:	8a 01       	movw	r16, r20
    10ee:	e6 28       	or	r14, r6
    10f0:	f7 28       	or	r15, r7
    10f2:	08 29       	or	r16, r8
    10f4:	19 29       	or	r17, r9
    10f6:	3c c0       	rjmp	.+120    	; 0x1170 <__stack+0x71>
    10f8:	23 2b       	or	r18, r19
    10fa:	d1 f1       	breq	.+116    	; 0x1170 <__stack+0x71>
    10fc:	26 0e       	add	r2, r22
    10fe:	37 1e       	adc	r3, r23
    1100:	35 01       	movw	r6, r10
    1102:	46 01       	movw	r8, r12
    1104:	06 2e       	mov	r0, r22
    1106:	04 c0       	rjmp	.+8      	; 0x1110 <__stack+0x11>
    1108:	96 94       	lsr	r9
    110a:	87 94       	ror	r8
    110c:	77 94       	ror	r7
    110e:	67 94       	ror	r6
    1110:	0a 94       	dec	r0
    1112:	d2 f7       	brpl	.-12     	; 0x1108 <__stack+0x9>
    1114:	21 e0       	ldi	r18, 0x01	; 1
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	40 e0       	ldi	r20, 0x00	; 0
    111a:	50 e0       	ldi	r21, 0x00	; 0
    111c:	04 c0       	rjmp	.+8      	; 0x1126 <__stack+0x27>
    111e:	22 0f       	add	r18, r18
    1120:	33 1f       	adc	r19, r19
    1122:	44 1f       	adc	r20, r20
    1124:	55 1f       	adc	r21, r21
    1126:	6a 95       	dec	r22
    1128:	d2 f7       	brpl	.-12     	; 0x111e <__stack+0x1f>
    112a:	21 50       	subi	r18, 0x01	; 1
    112c:	30 40       	sbci	r19, 0x00	; 0
    112e:	40 40       	sbci	r20, 0x00	; 0
    1130:	50 40       	sbci	r21, 0x00	; 0
    1132:	2a 21       	and	r18, r10
    1134:	3b 21       	and	r19, r11
    1136:	4c 21       	and	r20, r12
    1138:	5d 21       	and	r21, r13
    113a:	21 15       	cp	r18, r1
    113c:	31 05       	cpc	r19, r1
    113e:	41 05       	cpc	r20, r1
    1140:	51 05       	cpc	r21, r1
    1142:	21 f0       	breq	.+8      	; 0x114c <__stack+0x4d>
    1144:	21 e0       	ldi	r18, 0x01	; 1
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	40 e0       	ldi	r20, 0x00	; 0
    114a:	50 e0       	ldi	r21, 0x00	; 0
    114c:	59 01       	movw	r10, r18
    114e:	6a 01       	movw	r12, r20
    1150:	a6 28       	or	r10, r6
    1152:	b7 28       	or	r11, r7
    1154:	c8 28       	or	r12, r8
    1156:	d9 28       	or	r13, r9
    1158:	0b c0       	rjmp	.+22     	; 0x1170 <__stack+0x71>
    115a:	82 15       	cp	r24, r2
    115c:	93 05       	cpc	r25, r3
    115e:	2c f0       	brlt	.+10     	; 0x116a <__stack+0x6b>
    1160:	1c 01       	movw	r2, r24
    1162:	aa 24       	eor	r10, r10
    1164:	bb 24       	eor	r11, r11
    1166:	65 01       	movw	r12, r10
    1168:	03 c0       	rjmp	.+6      	; 0x1170 <__stack+0x71>
    116a:	ee 24       	eor	r14, r14
    116c:	ff 24       	eor	r15, r15
    116e:	87 01       	movw	r16, r14
    1170:	11 96       	adiw	r26, 0x01	; 1
    1172:	9c 91       	ld	r25, X
    1174:	d2 01       	movw	r26, r4
    1176:	11 96       	adiw	r26, 0x01	; 1
    1178:	8c 91       	ld	r24, X
    117a:	98 17       	cp	r25, r24
    117c:	09 f4       	brne	.+2      	; 0x1180 <__stack+0x81>
    117e:	45 c0       	rjmp	.+138    	; 0x120a <__stack+0x10b>
    1180:	99 23       	and	r25, r25
    1182:	39 f0       	breq	.+14     	; 0x1192 <__stack+0x93>
    1184:	a8 01       	movw	r20, r16
    1186:	97 01       	movw	r18, r14
    1188:	2a 19       	sub	r18, r10
    118a:	3b 09       	sbc	r19, r11
    118c:	4c 09       	sbc	r20, r12
    118e:	5d 09       	sbc	r21, r13
    1190:	06 c0       	rjmp	.+12     	; 0x119e <__stack+0x9f>
    1192:	a6 01       	movw	r20, r12
    1194:	95 01       	movw	r18, r10
    1196:	2e 19       	sub	r18, r14
    1198:	3f 09       	sbc	r19, r15
    119a:	40 0b       	sbc	r20, r16
    119c:	51 0b       	sbc	r21, r17
    119e:	57 fd       	sbrc	r21, 7
    11a0:	08 c0       	rjmp	.+16     	; 0x11b2 <__stack+0xb3>
    11a2:	11 82       	std	Z+1, r1	; 0x01
    11a4:	33 82       	std	Z+3, r3	; 0x03
    11a6:	22 82       	std	Z+2, r2	; 0x02
    11a8:	24 83       	std	Z+4, r18	; 0x04
    11aa:	35 83       	std	Z+5, r19	; 0x05
    11ac:	46 83       	std	Z+6, r20	; 0x06
    11ae:	57 83       	std	Z+7, r21	; 0x07
    11b0:	1d c0       	rjmp	.+58     	; 0x11ec <__stack+0xed>
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	81 83       	std	Z+1, r24	; 0x01
    11b6:	33 82       	std	Z+3, r3	; 0x03
    11b8:	22 82       	std	Z+2, r2	; 0x02
    11ba:	88 27       	eor	r24, r24
    11bc:	99 27       	eor	r25, r25
    11be:	dc 01       	movw	r26, r24
    11c0:	82 1b       	sub	r24, r18
    11c2:	93 0b       	sbc	r25, r19
    11c4:	a4 0b       	sbc	r26, r20
    11c6:	b5 0b       	sbc	r27, r21
    11c8:	84 83       	std	Z+4, r24	; 0x04
    11ca:	95 83       	std	Z+5, r25	; 0x05
    11cc:	a6 83       	std	Z+6, r26	; 0x06
    11ce:	b7 83       	std	Z+7, r27	; 0x07
    11d0:	0d c0       	rjmp	.+26     	; 0x11ec <__stack+0xed>
    11d2:	22 0f       	add	r18, r18
    11d4:	33 1f       	adc	r19, r19
    11d6:	44 1f       	adc	r20, r20
    11d8:	55 1f       	adc	r21, r21
    11da:	24 83       	std	Z+4, r18	; 0x04
    11dc:	35 83       	std	Z+5, r19	; 0x05
    11de:	46 83       	std	Z+6, r20	; 0x06
    11e0:	57 83       	std	Z+7, r21	; 0x07
    11e2:	82 81       	ldd	r24, Z+2	; 0x02
    11e4:	93 81       	ldd	r25, Z+3	; 0x03
    11e6:	01 97       	sbiw	r24, 0x01	; 1
    11e8:	93 83       	std	Z+3, r25	; 0x03
    11ea:	82 83       	std	Z+2, r24	; 0x02
    11ec:	24 81       	ldd	r18, Z+4	; 0x04
    11ee:	35 81       	ldd	r19, Z+5	; 0x05
    11f0:	46 81       	ldd	r20, Z+6	; 0x06
    11f2:	57 81       	ldd	r21, Z+7	; 0x07
    11f4:	da 01       	movw	r26, r20
    11f6:	c9 01       	movw	r24, r18
    11f8:	01 97       	sbiw	r24, 0x01	; 1
    11fa:	a1 09       	sbc	r26, r1
    11fc:	b1 09       	sbc	r27, r1
    11fe:	8f 5f       	subi	r24, 0xFF	; 255
    1200:	9f 4f       	sbci	r25, 0xFF	; 255
    1202:	af 4f       	sbci	r26, 0xFF	; 255
    1204:	bf 43       	sbci	r27, 0x3F	; 63
    1206:	28 f3       	brcs	.-54     	; 0x11d2 <__stack+0xd3>
    1208:	0b c0       	rjmp	.+22     	; 0x1220 <__stack+0x121>
    120a:	91 83       	std	Z+1, r25	; 0x01
    120c:	33 82       	std	Z+3, r3	; 0x03
    120e:	22 82       	std	Z+2, r2	; 0x02
    1210:	ea 0c       	add	r14, r10
    1212:	fb 1c       	adc	r15, r11
    1214:	0c 1d       	adc	r16, r12
    1216:	1d 1d       	adc	r17, r13
    1218:	e4 82       	std	Z+4, r14	; 0x04
    121a:	f5 82       	std	Z+5, r15	; 0x05
    121c:	06 83       	std	Z+6, r16	; 0x06
    121e:	17 83       	std	Z+7, r17	; 0x07
    1220:	83 e0       	ldi	r24, 0x03	; 3
    1222:	80 83       	st	Z, r24
    1224:	24 81       	ldd	r18, Z+4	; 0x04
    1226:	35 81       	ldd	r19, Z+5	; 0x05
    1228:	46 81       	ldd	r20, Z+6	; 0x06
    122a:	57 81       	ldd	r21, Z+7	; 0x07
    122c:	57 ff       	sbrs	r21, 7
    122e:	1a c0       	rjmp	.+52     	; 0x1264 <__stack+0x165>
    1230:	c9 01       	movw	r24, r18
    1232:	aa 27       	eor	r26, r26
    1234:	97 fd       	sbrc	r25, 7
    1236:	a0 95       	com	r26
    1238:	ba 2f       	mov	r27, r26
    123a:	81 70       	andi	r24, 0x01	; 1
    123c:	90 70       	andi	r25, 0x00	; 0
    123e:	a0 70       	andi	r26, 0x00	; 0
    1240:	b0 70       	andi	r27, 0x00	; 0
    1242:	56 95       	lsr	r21
    1244:	47 95       	ror	r20
    1246:	37 95       	ror	r19
    1248:	27 95       	ror	r18
    124a:	82 2b       	or	r24, r18
    124c:	93 2b       	or	r25, r19
    124e:	a4 2b       	or	r26, r20
    1250:	b5 2b       	or	r27, r21
    1252:	84 83       	std	Z+4, r24	; 0x04
    1254:	95 83       	std	Z+5, r25	; 0x05
    1256:	a6 83       	std	Z+6, r26	; 0x06
    1258:	b7 83       	std	Z+7, r27	; 0x07
    125a:	82 81       	ldd	r24, Z+2	; 0x02
    125c:	93 81       	ldd	r25, Z+3	; 0x03
    125e:	01 96       	adiw	r24, 0x01	; 1
    1260:	93 83       	std	Z+3, r25	; 0x03
    1262:	82 83       	std	Z+2, r24	; 0x02
    1264:	df 01       	movw	r26, r30
    1266:	01 c0       	rjmp	.+2      	; 0x126a <__stack+0x16b>
    1268:	d2 01       	movw	r26, r4
    126a:	cd 01       	movw	r24, r26
    126c:	cd b7       	in	r28, 0x3d	; 61
    126e:	de b7       	in	r29, 0x3e	; 62
    1270:	e2 e1       	ldi	r30, 0x12	; 18
    1272:	0c 94 82 0d 	jmp	0x1b04	; 0x1b04 <__epilogue_restores__>

00001276 <__subsf3>:
    1276:	a0 e2       	ldi	r26, 0x20	; 32
    1278:	b0 e0       	ldi	r27, 0x00	; 0
    127a:	e1 e4       	ldi	r30, 0x41	; 65
    127c:	f9 e0       	ldi	r31, 0x09	; 9
    127e:	0c 94 72 0d 	jmp	0x1ae4	; 0x1ae4 <__prologue_saves__+0x18>
    1282:	69 83       	std	Y+1, r22	; 0x01
    1284:	7a 83       	std	Y+2, r23	; 0x02
    1286:	8b 83       	std	Y+3, r24	; 0x03
    1288:	9c 83       	std	Y+4, r25	; 0x04
    128a:	2d 83       	std	Y+5, r18	; 0x05
    128c:	3e 83       	std	Y+6, r19	; 0x06
    128e:	4f 83       	std	Y+7, r20	; 0x07
    1290:	58 87       	std	Y+8, r21	; 0x08
    1292:	e9 e0       	ldi	r30, 0x09	; 9
    1294:	ee 2e       	mov	r14, r30
    1296:	f1 2c       	mov	r15, r1
    1298:	ec 0e       	add	r14, r28
    129a:	fd 1e       	adc	r15, r29
    129c:	ce 01       	movw	r24, r28
    129e:	01 96       	adiw	r24, 0x01	; 1
    12a0:	b7 01       	movw	r22, r14
    12a2:	0e 94 4c 0c 	call	0x1898	; 0x1898 <__unpack_f>
    12a6:	8e 01       	movw	r16, r28
    12a8:	0f 5e       	subi	r16, 0xEF	; 239
    12aa:	1f 4f       	sbci	r17, 0xFF	; 255
    12ac:	ce 01       	movw	r24, r28
    12ae:	05 96       	adiw	r24, 0x05	; 5
    12b0:	b8 01       	movw	r22, r16
    12b2:	0e 94 4c 0c 	call	0x1898	; 0x1898 <__unpack_f>
    12b6:	8a 89       	ldd	r24, Y+18	; 0x12
    12b8:	91 e0       	ldi	r25, 0x01	; 1
    12ba:	89 27       	eor	r24, r25
    12bc:	8a 8b       	std	Y+18, r24	; 0x12
    12be:	c7 01       	movw	r24, r14
    12c0:	b8 01       	movw	r22, r16
    12c2:	ae 01       	movw	r20, r28
    12c4:	47 5e       	subi	r20, 0xE7	; 231
    12c6:	5f 4f       	sbci	r21, 0xFF	; 255
    12c8:	0e 94 ef 07 	call	0xfde	; 0xfde <_fpadd_parts>
    12cc:	0e 94 77 0b 	call	0x16ee	; 0x16ee <__pack_f>
    12d0:	a0 96       	adiw	r28, 0x20	; 32
    12d2:	e6 e0       	ldi	r30, 0x06	; 6
    12d4:	0c 94 8e 0d 	jmp	0x1b1c	; 0x1b1c <__epilogue_restores__+0x18>

000012d8 <__addsf3>:
    12d8:	a0 e2       	ldi	r26, 0x20	; 32
    12da:	b0 e0       	ldi	r27, 0x00	; 0
    12dc:	e2 e7       	ldi	r30, 0x72	; 114
    12de:	f9 e0       	ldi	r31, 0x09	; 9
    12e0:	0c 94 72 0d 	jmp	0x1ae4	; 0x1ae4 <__prologue_saves__+0x18>
    12e4:	69 83       	std	Y+1, r22	; 0x01
    12e6:	7a 83       	std	Y+2, r23	; 0x02
    12e8:	8b 83       	std	Y+3, r24	; 0x03
    12ea:	9c 83       	std	Y+4, r25	; 0x04
    12ec:	2d 83       	std	Y+5, r18	; 0x05
    12ee:	3e 83       	std	Y+6, r19	; 0x06
    12f0:	4f 83       	std	Y+7, r20	; 0x07
    12f2:	58 87       	std	Y+8, r21	; 0x08
    12f4:	f9 e0       	ldi	r31, 0x09	; 9
    12f6:	ef 2e       	mov	r14, r31
    12f8:	f1 2c       	mov	r15, r1
    12fa:	ec 0e       	add	r14, r28
    12fc:	fd 1e       	adc	r15, r29
    12fe:	ce 01       	movw	r24, r28
    1300:	01 96       	adiw	r24, 0x01	; 1
    1302:	b7 01       	movw	r22, r14
    1304:	0e 94 4c 0c 	call	0x1898	; 0x1898 <__unpack_f>
    1308:	8e 01       	movw	r16, r28
    130a:	0f 5e       	subi	r16, 0xEF	; 239
    130c:	1f 4f       	sbci	r17, 0xFF	; 255
    130e:	ce 01       	movw	r24, r28
    1310:	05 96       	adiw	r24, 0x05	; 5
    1312:	b8 01       	movw	r22, r16
    1314:	0e 94 4c 0c 	call	0x1898	; 0x1898 <__unpack_f>
    1318:	c7 01       	movw	r24, r14
    131a:	b8 01       	movw	r22, r16
    131c:	ae 01       	movw	r20, r28
    131e:	47 5e       	subi	r20, 0xE7	; 231
    1320:	5f 4f       	sbci	r21, 0xFF	; 255
    1322:	0e 94 ef 07 	call	0xfde	; 0xfde <_fpadd_parts>
    1326:	0e 94 77 0b 	call	0x16ee	; 0x16ee <__pack_f>
    132a:	a0 96       	adiw	r28, 0x20	; 32
    132c:	e6 e0       	ldi	r30, 0x06	; 6
    132e:	0c 94 8e 0d 	jmp	0x1b1c	; 0x1b1c <__epilogue_restores__+0x18>

00001332 <__mulsf3>:
    1332:	a0 e2       	ldi	r26, 0x20	; 32
    1334:	b0 e0       	ldi	r27, 0x00	; 0
    1336:	ef e9       	ldi	r30, 0x9F	; 159
    1338:	f9 e0       	ldi	r31, 0x09	; 9
    133a:	0c 94 66 0d 	jmp	0x1acc	; 0x1acc <__prologue_saves__>
    133e:	69 83       	std	Y+1, r22	; 0x01
    1340:	7a 83       	std	Y+2, r23	; 0x02
    1342:	8b 83       	std	Y+3, r24	; 0x03
    1344:	9c 83       	std	Y+4, r25	; 0x04
    1346:	2d 83       	std	Y+5, r18	; 0x05
    1348:	3e 83       	std	Y+6, r19	; 0x06
    134a:	4f 83       	std	Y+7, r20	; 0x07
    134c:	58 87       	std	Y+8, r21	; 0x08
    134e:	ce 01       	movw	r24, r28
    1350:	01 96       	adiw	r24, 0x01	; 1
    1352:	be 01       	movw	r22, r28
    1354:	67 5f       	subi	r22, 0xF7	; 247
    1356:	7f 4f       	sbci	r23, 0xFF	; 255
    1358:	0e 94 4c 0c 	call	0x1898	; 0x1898 <__unpack_f>
    135c:	ce 01       	movw	r24, r28
    135e:	05 96       	adiw	r24, 0x05	; 5
    1360:	be 01       	movw	r22, r28
    1362:	6f 5e       	subi	r22, 0xEF	; 239
    1364:	7f 4f       	sbci	r23, 0xFF	; 255
    1366:	0e 94 4c 0c 	call	0x1898	; 0x1898 <__unpack_f>
    136a:	99 85       	ldd	r25, Y+9	; 0x09
    136c:	92 30       	cpi	r25, 0x02	; 2
    136e:	88 f0       	brcs	.+34     	; 0x1392 <__mulsf3+0x60>
    1370:	89 89       	ldd	r24, Y+17	; 0x11
    1372:	82 30       	cpi	r24, 0x02	; 2
    1374:	c8 f0       	brcs	.+50     	; 0x13a8 <__mulsf3+0x76>
    1376:	94 30       	cpi	r25, 0x04	; 4
    1378:	19 f4       	brne	.+6      	; 0x1380 <__mulsf3+0x4e>
    137a:	82 30       	cpi	r24, 0x02	; 2
    137c:	51 f4       	brne	.+20     	; 0x1392 <__mulsf3+0x60>
    137e:	04 c0       	rjmp	.+8      	; 0x1388 <__mulsf3+0x56>
    1380:	84 30       	cpi	r24, 0x04	; 4
    1382:	29 f4       	brne	.+10     	; 0x138e <__mulsf3+0x5c>
    1384:	92 30       	cpi	r25, 0x02	; 2
    1386:	81 f4       	brne	.+32     	; 0x13a8 <__mulsf3+0x76>
    1388:	82 e1       	ldi	r24, 0x12	; 18
    138a:	91 e0       	ldi	r25, 0x01	; 1
    138c:	c6 c0       	rjmp	.+396    	; 0x151a <__mulsf3+0x1e8>
    138e:	92 30       	cpi	r25, 0x02	; 2
    1390:	49 f4       	brne	.+18     	; 0x13a4 <__mulsf3+0x72>
    1392:	20 e0       	ldi	r18, 0x00	; 0
    1394:	9a 85       	ldd	r25, Y+10	; 0x0a
    1396:	8a 89       	ldd	r24, Y+18	; 0x12
    1398:	98 13       	cpse	r25, r24
    139a:	21 e0       	ldi	r18, 0x01	; 1
    139c:	2a 87       	std	Y+10, r18	; 0x0a
    139e:	ce 01       	movw	r24, r28
    13a0:	09 96       	adiw	r24, 0x09	; 9
    13a2:	bb c0       	rjmp	.+374    	; 0x151a <__mulsf3+0x1e8>
    13a4:	82 30       	cpi	r24, 0x02	; 2
    13a6:	49 f4       	brne	.+18     	; 0x13ba <__mulsf3+0x88>
    13a8:	20 e0       	ldi	r18, 0x00	; 0
    13aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    13ac:	8a 89       	ldd	r24, Y+18	; 0x12
    13ae:	98 13       	cpse	r25, r24
    13b0:	21 e0       	ldi	r18, 0x01	; 1
    13b2:	2a 8b       	std	Y+18, r18	; 0x12
    13b4:	ce 01       	movw	r24, r28
    13b6:	41 96       	adiw	r24, 0x11	; 17
    13b8:	b0 c0       	rjmp	.+352    	; 0x151a <__mulsf3+0x1e8>
    13ba:	2d 84       	ldd	r2, Y+13	; 0x0d
    13bc:	3e 84       	ldd	r3, Y+14	; 0x0e
    13be:	4f 84       	ldd	r4, Y+15	; 0x0f
    13c0:	58 88       	ldd	r5, Y+16	; 0x10
    13c2:	6d 88       	ldd	r6, Y+21	; 0x15
    13c4:	7e 88       	ldd	r7, Y+22	; 0x16
    13c6:	8f 88       	ldd	r8, Y+23	; 0x17
    13c8:	98 8c       	ldd	r9, Y+24	; 0x18
    13ca:	ee 24       	eor	r14, r14
    13cc:	ff 24       	eor	r15, r15
    13ce:	87 01       	movw	r16, r14
    13d0:	aa 24       	eor	r10, r10
    13d2:	bb 24       	eor	r11, r11
    13d4:	65 01       	movw	r12, r10
    13d6:	40 e0       	ldi	r20, 0x00	; 0
    13d8:	50 e0       	ldi	r21, 0x00	; 0
    13da:	60 e0       	ldi	r22, 0x00	; 0
    13dc:	70 e0       	ldi	r23, 0x00	; 0
    13de:	e0 e0       	ldi	r30, 0x00	; 0
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	c1 01       	movw	r24, r2
    13e4:	81 70       	andi	r24, 0x01	; 1
    13e6:	90 70       	andi	r25, 0x00	; 0
    13e8:	89 2b       	or	r24, r25
    13ea:	e9 f0       	breq	.+58     	; 0x1426 <__mulsf3+0xf4>
    13ec:	e6 0c       	add	r14, r6
    13ee:	f7 1c       	adc	r15, r7
    13f0:	08 1d       	adc	r16, r8
    13f2:	19 1d       	adc	r17, r9
    13f4:	9a 01       	movw	r18, r20
    13f6:	ab 01       	movw	r20, r22
    13f8:	2a 0d       	add	r18, r10
    13fa:	3b 1d       	adc	r19, r11
    13fc:	4c 1d       	adc	r20, r12
    13fe:	5d 1d       	adc	r21, r13
    1400:	80 e0       	ldi	r24, 0x00	; 0
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	a0 e0       	ldi	r26, 0x00	; 0
    1406:	b0 e0       	ldi	r27, 0x00	; 0
    1408:	e6 14       	cp	r14, r6
    140a:	f7 04       	cpc	r15, r7
    140c:	08 05       	cpc	r16, r8
    140e:	19 05       	cpc	r17, r9
    1410:	20 f4       	brcc	.+8      	; 0x141a <__mulsf3+0xe8>
    1412:	81 e0       	ldi	r24, 0x01	; 1
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	a0 e0       	ldi	r26, 0x00	; 0
    1418:	b0 e0       	ldi	r27, 0x00	; 0
    141a:	ba 01       	movw	r22, r20
    141c:	a9 01       	movw	r20, r18
    141e:	48 0f       	add	r20, r24
    1420:	59 1f       	adc	r21, r25
    1422:	6a 1f       	adc	r22, r26
    1424:	7b 1f       	adc	r23, r27
    1426:	aa 0c       	add	r10, r10
    1428:	bb 1c       	adc	r11, r11
    142a:	cc 1c       	adc	r12, r12
    142c:	dd 1c       	adc	r13, r13
    142e:	97 fe       	sbrs	r9, 7
    1430:	08 c0       	rjmp	.+16     	; 0x1442 <__mulsf3+0x110>
    1432:	81 e0       	ldi	r24, 0x01	; 1
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	a0 e0       	ldi	r26, 0x00	; 0
    1438:	b0 e0       	ldi	r27, 0x00	; 0
    143a:	a8 2a       	or	r10, r24
    143c:	b9 2a       	or	r11, r25
    143e:	ca 2a       	or	r12, r26
    1440:	db 2a       	or	r13, r27
    1442:	31 96       	adiw	r30, 0x01	; 1
    1444:	e0 32       	cpi	r30, 0x20	; 32
    1446:	f1 05       	cpc	r31, r1
    1448:	49 f0       	breq	.+18     	; 0x145c <__mulsf3+0x12a>
    144a:	66 0c       	add	r6, r6
    144c:	77 1c       	adc	r7, r7
    144e:	88 1c       	adc	r8, r8
    1450:	99 1c       	adc	r9, r9
    1452:	56 94       	lsr	r5
    1454:	47 94       	ror	r4
    1456:	37 94       	ror	r3
    1458:	27 94       	ror	r2
    145a:	c3 cf       	rjmp	.-122    	; 0x13e2 <__mulsf3+0xb0>
    145c:	fa 85       	ldd	r31, Y+10	; 0x0a
    145e:	ea 89       	ldd	r30, Y+18	; 0x12
    1460:	2b 89       	ldd	r18, Y+19	; 0x13
    1462:	3c 89       	ldd	r19, Y+20	; 0x14
    1464:	8b 85       	ldd	r24, Y+11	; 0x0b
    1466:	9c 85       	ldd	r25, Y+12	; 0x0c
    1468:	28 0f       	add	r18, r24
    146a:	39 1f       	adc	r19, r25
    146c:	2e 5f       	subi	r18, 0xFE	; 254
    146e:	3f 4f       	sbci	r19, 0xFF	; 255
    1470:	17 c0       	rjmp	.+46     	; 0x14a0 <__mulsf3+0x16e>
    1472:	ca 01       	movw	r24, r20
    1474:	81 70       	andi	r24, 0x01	; 1
    1476:	90 70       	andi	r25, 0x00	; 0
    1478:	89 2b       	or	r24, r25
    147a:	61 f0       	breq	.+24     	; 0x1494 <__mulsf3+0x162>
    147c:	16 95       	lsr	r17
    147e:	07 95       	ror	r16
    1480:	f7 94       	ror	r15
    1482:	e7 94       	ror	r14
    1484:	80 e0       	ldi	r24, 0x00	; 0
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	a0 e0       	ldi	r26, 0x00	; 0
    148a:	b0 e8       	ldi	r27, 0x80	; 128
    148c:	e8 2a       	or	r14, r24
    148e:	f9 2a       	or	r15, r25
    1490:	0a 2b       	or	r16, r26
    1492:	1b 2b       	or	r17, r27
    1494:	76 95       	lsr	r23
    1496:	67 95       	ror	r22
    1498:	57 95       	ror	r21
    149a:	47 95       	ror	r20
    149c:	2f 5f       	subi	r18, 0xFF	; 255
    149e:	3f 4f       	sbci	r19, 0xFF	; 255
    14a0:	77 fd       	sbrc	r23, 7
    14a2:	e7 cf       	rjmp	.-50     	; 0x1472 <__mulsf3+0x140>
    14a4:	0c c0       	rjmp	.+24     	; 0x14be <__mulsf3+0x18c>
    14a6:	44 0f       	add	r20, r20
    14a8:	55 1f       	adc	r21, r21
    14aa:	66 1f       	adc	r22, r22
    14ac:	77 1f       	adc	r23, r23
    14ae:	17 fd       	sbrc	r17, 7
    14b0:	41 60       	ori	r20, 0x01	; 1
    14b2:	ee 0c       	add	r14, r14
    14b4:	ff 1c       	adc	r15, r15
    14b6:	00 1f       	adc	r16, r16
    14b8:	11 1f       	adc	r17, r17
    14ba:	21 50       	subi	r18, 0x01	; 1
    14bc:	30 40       	sbci	r19, 0x00	; 0
    14be:	40 30       	cpi	r20, 0x00	; 0
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	59 07       	cpc	r21, r25
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	69 07       	cpc	r22, r25
    14c8:	90 e4       	ldi	r25, 0x40	; 64
    14ca:	79 07       	cpc	r23, r25
    14cc:	60 f3       	brcs	.-40     	; 0x14a6 <__mulsf3+0x174>
    14ce:	2b 8f       	std	Y+27, r18	; 0x1b
    14d0:	3c 8f       	std	Y+28, r19	; 0x1c
    14d2:	db 01       	movw	r26, r22
    14d4:	ca 01       	movw	r24, r20
    14d6:	8f 77       	andi	r24, 0x7F	; 127
    14d8:	90 70       	andi	r25, 0x00	; 0
    14da:	a0 70       	andi	r26, 0x00	; 0
    14dc:	b0 70       	andi	r27, 0x00	; 0
    14de:	80 34       	cpi	r24, 0x40	; 64
    14e0:	91 05       	cpc	r25, r1
    14e2:	a1 05       	cpc	r26, r1
    14e4:	b1 05       	cpc	r27, r1
    14e6:	61 f4       	brne	.+24     	; 0x1500 <__mulsf3+0x1ce>
    14e8:	47 fd       	sbrc	r20, 7
    14ea:	0a c0       	rjmp	.+20     	; 0x1500 <__mulsf3+0x1ce>
    14ec:	e1 14       	cp	r14, r1
    14ee:	f1 04       	cpc	r15, r1
    14f0:	01 05       	cpc	r16, r1
    14f2:	11 05       	cpc	r17, r1
    14f4:	29 f0       	breq	.+10     	; 0x1500 <__mulsf3+0x1ce>
    14f6:	40 5c       	subi	r20, 0xC0	; 192
    14f8:	5f 4f       	sbci	r21, 0xFF	; 255
    14fa:	6f 4f       	sbci	r22, 0xFF	; 255
    14fc:	7f 4f       	sbci	r23, 0xFF	; 255
    14fe:	40 78       	andi	r20, 0x80	; 128
    1500:	1a 8e       	std	Y+26, r1	; 0x1a
    1502:	fe 17       	cp	r31, r30
    1504:	11 f0       	breq	.+4      	; 0x150a <__mulsf3+0x1d8>
    1506:	81 e0       	ldi	r24, 0x01	; 1
    1508:	8a 8f       	std	Y+26, r24	; 0x1a
    150a:	4d 8f       	std	Y+29, r20	; 0x1d
    150c:	5e 8f       	std	Y+30, r21	; 0x1e
    150e:	6f 8f       	std	Y+31, r22	; 0x1f
    1510:	78 a3       	std	Y+32, r23	; 0x20
    1512:	83 e0       	ldi	r24, 0x03	; 3
    1514:	89 8f       	std	Y+25, r24	; 0x19
    1516:	ce 01       	movw	r24, r28
    1518:	49 96       	adiw	r24, 0x19	; 25
    151a:	0e 94 77 0b 	call	0x16ee	; 0x16ee <__pack_f>
    151e:	a0 96       	adiw	r28, 0x20	; 32
    1520:	e2 e1       	ldi	r30, 0x12	; 18
    1522:	0c 94 82 0d 	jmp	0x1b04	; 0x1b04 <__epilogue_restores__>

00001526 <__gtsf2>:
    1526:	a8 e1       	ldi	r26, 0x18	; 24
    1528:	b0 e0       	ldi	r27, 0x00	; 0
    152a:	e9 e9       	ldi	r30, 0x99	; 153
    152c:	fa e0       	ldi	r31, 0x0A	; 10
    152e:	0c 94 72 0d 	jmp	0x1ae4	; 0x1ae4 <__prologue_saves__+0x18>
    1532:	69 83       	std	Y+1, r22	; 0x01
    1534:	7a 83       	std	Y+2, r23	; 0x02
    1536:	8b 83       	std	Y+3, r24	; 0x03
    1538:	9c 83       	std	Y+4, r25	; 0x04
    153a:	2d 83       	std	Y+5, r18	; 0x05
    153c:	3e 83       	std	Y+6, r19	; 0x06
    153e:	4f 83       	std	Y+7, r20	; 0x07
    1540:	58 87       	std	Y+8, r21	; 0x08
    1542:	89 e0       	ldi	r24, 0x09	; 9
    1544:	e8 2e       	mov	r14, r24
    1546:	f1 2c       	mov	r15, r1
    1548:	ec 0e       	add	r14, r28
    154a:	fd 1e       	adc	r15, r29
    154c:	ce 01       	movw	r24, r28
    154e:	01 96       	adiw	r24, 0x01	; 1
    1550:	b7 01       	movw	r22, r14
    1552:	0e 94 4c 0c 	call	0x1898	; 0x1898 <__unpack_f>
    1556:	8e 01       	movw	r16, r28
    1558:	0f 5e       	subi	r16, 0xEF	; 239
    155a:	1f 4f       	sbci	r17, 0xFF	; 255
    155c:	ce 01       	movw	r24, r28
    155e:	05 96       	adiw	r24, 0x05	; 5
    1560:	b8 01       	movw	r22, r16
    1562:	0e 94 4c 0c 	call	0x1898	; 0x1898 <__unpack_f>
    1566:	89 85       	ldd	r24, Y+9	; 0x09
    1568:	82 30       	cpi	r24, 0x02	; 2
    156a:	40 f0       	brcs	.+16     	; 0x157c <__gtsf2+0x56>
    156c:	89 89       	ldd	r24, Y+17	; 0x11
    156e:	82 30       	cpi	r24, 0x02	; 2
    1570:	28 f0       	brcs	.+10     	; 0x157c <__gtsf2+0x56>
    1572:	c7 01       	movw	r24, r14
    1574:	b8 01       	movw	r22, r16
    1576:	0e 94 c4 0c 	call	0x1988	; 0x1988 <__fpcmp_parts_f>
    157a:	01 c0       	rjmp	.+2      	; 0x157e <__gtsf2+0x58>
    157c:	8f ef       	ldi	r24, 0xFF	; 255
    157e:	68 96       	adiw	r28, 0x18	; 24
    1580:	e6 e0       	ldi	r30, 0x06	; 6
    1582:	0c 94 8e 0d 	jmp	0x1b1c	; 0x1b1c <__epilogue_restores__+0x18>

00001586 <__gesf2>:
    1586:	a8 e1       	ldi	r26, 0x18	; 24
    1588:	b0 e0       	ldi	r27, 0x00	; 0
    158a:	e9 ec       	ldi	r30, 0xC9	; 201
    158c:	fa e0       	ldi	r31, 0x0A	; 10
    158e:	0c 94 72 0d 	jmp	0x1ae4	; 0x1ae4 <__prologue_saves__+0x18>
    1592:	69 83       	std	Y+1, r22	; 0x01
    1594:	7a 83       	std	Y+2, r23	; 0x02
    1596:	8b 83       	std	Y+3, r24	; 0x03
    1598:	9c 83       	std	Y+4, r25	; 0x04
    159a:	2d 83       	std	Y+5, r18	; 0x05
    159c:	3e 83       	std	Y+6, r19	; 0x06
    159e:	4f 83       	std	Y+7, r20	; 0x07
    15a0:	58 87       	std	Y+8, r21	; 0x08
    15a2:	89 e0       	ldi	r24, 0x09	; 9
    15a4:	e8 2e       	mov	r14, r24
    15a6:	f1 2c       	mov	r15, r1
    15a8:	ec 0e       	add	r14, r28
    15aa:	fd 1e       	adc	r15, r29
    15ac:	ce 01       	movw	r24, r28
    15ae:	01 96       	adiw	r24, 0x01	; 1
    15b0:	b7 01       	movw	r22, r14
    15b2:	0e 94 4c 0c 	call	0x1898	; 0x1898 <__unpack_f>
    15b6:	8e 01       	movw	r16, r28
    15b8:	0f 5e       	subi	r16, 0xEF	; 239
    15ba:	1f 4f       	sbci	r17, 0xFF	; 255
    15bc:	ce 01       	movw	r24, r28
    15be:	05 96       	adiw	r24, 0x05	; 5
    15c0:	b8 01       	movw	r22, r16
    15c2:	0e 94 4c 0c 	call	0x1898	; 0x1898 <__unpack_f>
    15c6:	89 85       	ldd	r24, Y+9	; 0x09
    15c8:	82 30       	cpi	r24, 0x02	; 2
    15ca:	40 f0       	brcs	.+16     	; 0x15dc <__gesf2+0x56>
    15cc:	89 89       	ldd	r24, Y+17	; 0x11
    15ce:	82 30       	cpi	r24, 0x02	; 2
    15d0:	28 f0       	brcs	.+10     	; 0x15dc <__gesf2+0x56>
    15d2:	c7 01       	movw	r24, r14
    15d4:	b8 01       	movw	r22, r16
    15d6:	0e 94 c4 0c 	call	0x1988	; 0x1988 <__fpcmp_parts_f>
    15da:	01 c0       	rjmp	.+2      	; 0x15de <__gesf2+0x58>
    15dc:	8f ef       	ldi	r24, 0xFF	; 255
    15de:	68 96       	adiw	r28, 0x18	; 24
    15e0:	e6 e0       	ldi	r30, 0x06	; 6
    15e2:	0c 94 8e 0d 	jmp	0x1b1c	; 0x1b1c <__epilogue_restores__+0x18>

000015e6 <__ltsf2>:
    15e6:	a8 e1       	ldi	r26, 0x18	; 24
    15e8:	b0 e0       	ldi	r27, 0x00	; 0
    15ea:	e9 ef       	ldi	r30, 0xF9	; 249
    15ec:	fa e0       	ldi	r31, 0x0A	; 10
    15ee:	0c 94 72 0d 	jmp	0x1ae4	; 0x1ae4 <__prologue_saves__+0x18>
    15f2:	69 83       	std	Y+1, r22	; 0x01
    15f4:	7a 83       	std	Y+2, r23	; 0x02
    15f6:	8b 83       	std	Y+3, r24	; 0x03
    15f8:	9c 83       	std	Y+4, r25	; 0x04
    15fa:	2d 83       	std	Y+5, r18	; 0x05
    15fc:	3e 83       	std	Y+6, r19	; 0x06
    15fe:	4f 83       	std	Y+7, r20	; 0x07
    1600:	58 87       	std	Y+8, r21	; 0x08
    1602:	89 e0       	ldi	r24, 0x09	; 9
    1604:	e8 2e       	mov	r14, r24
    1606:	f1 2c       	mov	r15, r1
    1608:	ec 0e       	add	r14, r28
    160a:	fd 1e       	adc	r15, r29
    160c:	ce 01       	movw	r24, r28
    160e:	01 96       	adiw	r24, 0x01	; 1
    1610:	b7 01       	movw	r22, r14
    1612:	0e 94 4c 0c 	call	0x1898	; 0x1898 <__unpack_f>
    1616:	8e 01       	movw	r16, r28
    1618:	0f 5e       	subi	r16, 0xEF	; 239
    161a:	1f 4f       	sbci	r17, 0xFF	; 255
    161c:	ce 01       	movw	r24, r28
    161e:	05 96       	adiw	r24, 0x05	; 5
    1620:	b8 01       	movw	r22, r16
    1622:	0e 94 4c 0c 	call	0x1898	; 0x1898 <__unpack_f>
    1626:	89 85       	ldd	r24, Y+9	; 0x09
    1628:	82 30       	cpi	r24, 0x02	; 2
    162a:	40 f0       	brcs	.+16     	; 0x163c <__ltsf2+0x56>
    162c:	89 89       	ldd	r24, Y+17	; 0x11
    162e:	82 30       	cpi	r24, 0x02	; 2
    1630:	28 f0       	brcs	.+10     	; 0x163c <__ltsf2+0x56>
    1632:	c7 01       	movw	r24, r14
    1634:	b8 01       	movw	r22, r16
    1636:	0e 94 c4 0c 	call	0x1988	; 0x1988 <__fpcmp_parts_f>
    163a:	01 c0       	rjmp	.+2      	; 0x163e <__ltsf2+0x58>
    163c:	81 e0       	ldi	r24, 0x01	; 1
    163e:	68 96       	adiw	r28, 0x18	; 24
    1640:	e6 e0       	ldi	r30, 0x06	; 6
    1642:	0c 94 8e 0d 	jmp	0x1b1c	; 0x1b1c <__epilogue_restores__+0x18>

00001646 <__fixsfsi>:
    1646:	ac e0       	ldi	r26, 0x0C	; 12
    1648:	b0 e0       	ldi	r27, 0x00	; 0
    164a:	e9 e2       	ldi	r30, 0x29	; 41
    164c:	fb e0       	ldi	r31, 0x0B	; 11
    164e:	0c 94 76 0d 	jmp	0x1aec	; 0x1aec <__prologue_saves__+0x20>
    1652:	69 83       	std	Y+1, r22	; 0x01
    1654:	7a 83       	std	Y+2, r23	; 0x02
    1656:	8b 83       	std	Y+3, r24	; 0x03
    1658:	9c 83       	std	Y+4, r25	; 0x04
    165a:	ce 01       	movw	r24, r28
    165c:	01 96       	adiw	r24, 0x01	; 1
    165e:	be 01       	movw	r22, r28
    1660:	6b 5f       	subi	r22, 0xFB	; 251
    1662:	7f 4f       	sbci	r23, 0xFF	; 255
    1664:	0e 94 4c 0c 	call	0x1898	; 0x1898 <__unpack_f>
    1668:	8d 81       	ldd	r24, Y+5	; 0x05
    166a:	82 30       	cpi	r24, 0x02	; 2
    166c:	61 f1       	breq	.+88     	; 0x16c6 <__fixsfsi+0x80>
    166e:	82 30       	cpi	r24, 0x02	; 2
    1670:	50 f1       	brcs	.+84     	; 0x16c6 <__fixsfsi+0x80>
    1672:	84 30       	cpi	r24, 0x04	; 4
    1674:	21 f4       	brne	.+8      	; 0x167e <__fixsfsi+0x38>
    1676:	8e 81       	ldd	r24, Y+6	; 0x06
    1678:	88 23       	and	r24, r24
    167a:	51 f1       	breq	.+84     	; 0x16d0 <__fixsfsi+0x8a>
    167c:	2e c0       	rjmp	.+92     	; 0x16da <__fixsfsi+0x94>
    167e:	2f 81       	ldd	r18, Y+7	; 0x07
    1680:	38 85       	ldd	r19, Y+8	; 0x08
    1682:	37 fd       	sbrc	r19, 7
    1684:	20 c0       	rjmp	.+64     	; 0x16c6 <__fixsfsi+0x80>
    1686:	6e 81       	ldd	r22, Y+6	; 0x06
    1688:	2f 31       	cpi	r18, 0x1F	; 31
    168a:	31 05       	cpc	r19, r1
    168c:	1c f0       	brlt	.+6      	; 0x1694 <__fixsfsi+0x4e>
    168e:	66 23       	and	r22, r22
    1690:	f9 f0       	breq	.+62     	; 0x16d0 <__fixsfsi+0x8a>
    1692:	23 c0       	rjmp	.+70     	; 0x16da <__fixsfsi+0x94>
    1694:	8e e1       	ldi	r24, 0x1E	; 30
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	82 1b       	sub	r24, r18
    169a:	93 0b       	sbc	r25, r19
    169c:	29 85       	ldd	r18, Y+9	; 0x09
    169e:	3a 85       	ldd	r19, Y+10	; 0x0a
    16a0:	4b 85       	ldd	r20, Y+11	; 0x0b
    16a2:	5c 85       	ldd	r21, Y+12	; 0x0c
    16a4:	04 c0       	rjmp	.+8      	; 0x16ae <__fixsfsi+0x68>
    16a6:	56 95       	lsr	r21
    16a8:	47 95       	ror	r20
    16aa:	37 95       	ror	r19
    16ac:	27 95       	ror	r18
    16ae:	8a 95       	dec	r24
    16b0:	d2 f7       	brpl	.-12     	; 0x16a6 <__fixsfsi+0x60>
    16b2:	66 23       	and	r22, r22
    16b4:	b1 f0       	breq	.+44     	; 0x16e2 <__fixsfsi+0x9c>
    16b6:	50 95       	com	r21
    16b8:	40 95       	com	r20
    16ba:	30 95       	com	r19
    16bc:	21 95       	neg	r18
    16be:	3f 4f       	sbci	r19, 0xFF	; 255
    16c0:	4f 4f       	sbci	r20, 0xFF	; 255
    16c2:	5f 4f       	sbci	r21, 0xFF	; 255
    16c4:	0e c0       	rjmp	.+28     	; 0x16e2 <__fixsfsi+0x9c>
    16c6:	20 e0       	ldi	r18, 0x00	; 0
    16c8:	30 e0       	ldi	r19, 0x00	; 0
    16ca:	40 e0       	ldi	r20, 0x00	; 0
    16cc:	50 e0       	ldi	r21, 0x00	; 0
    16ce:	09 c0       	rjmp	.+18     	; 0x16e2 <__fixsfsi+0x9c>
    16d0:	2f ef       	ldi	r18, 0xFF	; 255
    16d2:	3f ef       	ldi	r19, 0xFF	; 255
    16d4:	4f ef       	ldi	r20, 0xFF	; 255
    16d6:	5f e7       	ldi	r21, 0x7F	; 127
    16d8:	04 c0       	rjmp	.+8      	; 0x16e2 <__fixsfsi+0x9c>
    16da:	20 e0       	ldi	r18, 0x00	; 0
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	40 e0       	ldi	r20, 0x00	; 0
    16e0:	50 e8       	ldi	r21, 0x80	; 128
    16e2:	b9 01       	movw	r22, r18
    16e4:	ca 01       	movw	r24, r20
    16e6:	2c 96       	adiw	r28, 0x0c	; 12
    16e8:	e2 e0       	ldi	r30, 0x02	; 2
    16ea:	0c 94 92 0d 	jmp	0x1b24	; 0x1b24 <__epilogue_restores__+0x20>

000016ee <__pack_f>:
    16ee:	df 92       	push	r13
    16f0:	ef 92       	push	r14
    16f2:	ff 92       	push	r15
    16f4:	0f 93       	push	r16
    16f6:	1f 93       	push	r17
    16f8:	fc 01       	movw	r30, r24
    16fa:	e4 80       	ldd	r14, Z+4	; 0x04
    16fc:	f5 80       	ldd	r15, Z+5	; 0x05
    16fe:	06 81       	ldd	r16, Z+6	; 0x06
    1700:	17 81       	ldd	r17, Z+7	; 0x07
    1702:	d1 80       	ldd	r13, Z+1	; 0x01
    1704:	80 81       	ld	r24, Z
    1706:	82 30       	cpi	r24, 0x02	; 2
    1708:	48 f4       	brcc	.+18     	; 0x171c <__pack_f+0x2e>
    170a:	80 e0       	ldi	r24, 0x00	; 0
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	a0 e1       	ldi	r26, 0x10	; 16
    1710:	b0 e0       	ldi	r27, 0x00	; 0
    1712:	e8 2a       	or	r14, r24
    1714:	f9 2a       	or	r15, r25
    1716:	0a 2b       	or	r16, r26
    1718:	1b 2b       	or	r17, r27
    171a:	a5 c0       	rjmp	.+330    	; 0x1866 <__pack_f+0x178>
    171c:	84 30       	cpi	r24, 0x04	; 4
    171e:	09 f4       	brne	.+2      	; 0x1722 <__pack_f+0x34>
    1720:	9f c0       	rjmp	.+318    	; 0x1860 <__pack_f+0x172>
    1722:	82 30       	cpi	r24, 0x02	; 2
    1724:	21 f4       	brne	.+8      	; 0x172e <__pack_f+0x40>
    1726:	ee 24       	eor	r14, r14
    1728:	ff 24       	eor	r15, r15
    172a:	87 01       	movw	r16, r14
    172c:	05 c0       	rjmp	.+10     	; 0x1738 <__pack_f+0x4a>
    172e:	e1 14       	cp	r14, r1
    1730:	f1 04       	cpc	r15, r1
    1732:	01 05       	cpc	r16, r1
    1734:	11 05       	cpc	r17, r1
    1736:	19 f4       	brne	.+6      	; 0x173e <__pack_f+0x50>
    1738:	e0 e0       	ldi	r30, 0x00	; 0
    173a:	f0 e0       	ldi	r31, 0x00	; 0
    173c:	96 c0       	rjmp	.+300    	; 0x186a <__pack_f+0x17c>
    173e:	62 81       	ldd	r22, Z+2	; 0x02
    1740:	73 81       	ldd	r23, Z+3	; 0x03
    1742:	9f ef       	ldi	r25, 0xFF	; 255
    1744:	62 38       	cpi	r22, 0x82	; 130
    1746:	79 07       	cpc	r23, r25
    1748:	0c f0       	brlt	.+2      	; 0x174c <__pack_f+0x5e>
    174a:	5b c0       	rjmp	.+182    	; 0x1802 <__pack_f+0x114>
    174c:	22 e8       	ldi	r18, 0x82	; 130
    174e:	3f ef       	ldi	r19, 0xFF	; 255
    1750:	26 1b       	sub	r18, r22
    1752:	37 0b       	sbc	r19, r23
    1754:	2a 31       	cpi	r18, 0x1A	; 26
    1756:	31 05       	cpc	r19, r1
    1758:	2c f0       	brlt	.+10     	; 0x1764 <__pack_f+0x76>
    175a:	20 e0       	ldi	r18, 0x00	; 0
    175c:	30 e0       	ldi	r19, 0x00	; 0
    175e:	40 e0       	ldi	r20, 0x00	; 0
    1760:	50 e0       	ldi	r21, 0x00	; 0
    1762:	2a c0       	rjmp	.+84     	; 0x17b8 <__pack_f+0xca>
    1764:	b8 01       	movw	r22, r16
    1766:	a7 01       	movw	r20, r14
    1768:	02 2e       	mov	r0, r18
    176a:	04 c0       	rjmp	.+8      	; 0x1774 <__pack_f+0x86>
    176c:	76 95       	lsr	r23
    176e:	67 95       	ror	r22
    1770:	57 95       	ror	r21
    1772:	47 95       	ror	r20
    1774:	0a 94       	dec	r0
    1776:	d2 f7       	brpl	.-12     	; 0x176c <__pack_f+0x7e>
    1778:	81 e0       	ldi	r24, 0x01	; 1
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	a0 e0       	ldi	r26, 0x00	; 0
    177e:	b0 e0       	ldi	r27, 0x00	; 0
    1780:	04 c0       	rjmp	.+8      	; 0x178a <__pack_f+0x9c>
    1782:	88 0f       	add	r24, r24
    1784:	99 1f       	adc	r25, r25
    1786:	aa 1f       	adc	r26, r26
    1788:	bb 1f       	adc	r27, r27
    178a:	2a 95       	dec	r18
    178c:	d2 f7       	brpl	.-12     	; 0x1782 <__pack_f+0x94>
    178e:	01 97       	sbiw	r24, 0x01	; 1
    1790:	a1 09       	sbc	r26, r1
    1792:	b1 09       	sbc	r27, r1
    1794:	8e 21       	and	r24, r14
    1796:	9f 21       	and	r25, r15
    1798:	a0 23       	and	r26, r16
    179a:	b1 23       	and	r27, r17
    179c:	00 97       	sbiw	r24, 0x00	; 0
    179e:	a1 05       	cpc	r26, r1
    17a0:	b1 05       	cpc	r27, r1
    17a2:	21 f0       	breq	.+8      	; 0x17ac <__pack_f+0xbe>
    17a4:	81 e0       	ldi	r24, 0x01	; 1
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	a0 e0       	ldi	r26, 0x00	; 0
    17aa:	b0 e0       	ldi	r27, 0x00	; 0
    17ac:	9a 01       	movw	r18, r20
    17ae:	ab 01       	movw	r20, r22
    17b0:	28 2b       	or	r18, r24
    17b2:	39 2b       	or	r19, r25
    17b4:	4a 2b       	or	r20, r26
    17b6:	5b 2b       	or	r21, r27
    17b8:	da 01       	movw	r26, r20
    17ba:	c9 01       	movw	r24, r18
    17bc:	8f 77       	andi	r24, 0x7F	; 127
    17be:	90 70       	andi	r25, 0x00	; 0
    17c0:	a0 70       	andi	r26, 0x00	; 0
    17c2:	b0 70       	andi	r27, 0x00	; 0
    17c4:	80 34       	cpi	r24, 0x40	; 64
    17c6:	91 05       	cpc	r25, r1
    17c8:	a1 05       	cpc	r26, r1
    17ca:	b1 05       	cpc	r27, r1
    17cc:	39 f4       	brne	.+14     	; 0x17dc <__pack_f+0xee>
    17ce:	27 ff       	sbrs	r18, 7
    17d0:	09 c0       	rjmp	.+18     	; 0x17e4 <__pack_f+0xf6>
    17d2:	20 5c       	subi	r18, 0xC0	; 192
    17d4:	3f 4f       	sbci	r19, 0xFF	; 255
    17d6:	4f 4f       	sbci	r20, 0xFF	; 255
    17d8:	5f 4f       	sbci	r21, 0xFF	; 255
    17da:	04 c0       	rjmp	.+8      	; 0x17e4 <__pack_f+0xf6>
    17dc:	21 5c       	subi	r18, 0xC1	; 193
    17de:	3f 4f       	sbci	r19, 0xFF	; 255
    17e0:	4f 4f       	sbci	r20, 0xFF	; 255
    17e2:	5f 4f       	sbci	r21, 0xFF	; 255
    17e4:	e0 e0       	ldi	r30, 0x00	; 0
    17e6:	f0 e0       	ldi	r31, 0x00	; 0
    17e8:	20 30       	cpi	r18, 0x00	; 0
    17ea:	a0 e0       	ldi	r26, 0x00	; 0
    17ec:	3a 07       	cpc	r19, r26
    17ee:	a0 e0       	ldi	r26, 0x00	; 0
    17f0:	4a 07       	cpc	r20, r26
    17f2:	a0 e4       	ldi	r26, 0x40	; 64
    17f4:	5a 07       	cpc	r21, r26
    17f6:	10 f0       	brcs	.+4      	; 0x17fc <__pack_f+0x10e>
    17f8:	e1 e0       	ldi	r30, 0x01	; 1
    17fa:	f0 e0       	ldi	r31, 0x00	; 0
    17fc:	79 01       	movw	r14, r18
    17fe:	8a 01       	movw	r16, r20
    1800:	27 c0       	rjmp	.+78     	; 0x1850 <__pack_f+0x162>
    1802:	60 38       	cpi	r22, 0x80	; 128
    1804:	71 05       	cpc	r23, r1
    1806:	64 f5       	brge	.+88     	; 0x1860 <__pack_f+0x172>
    1808:	fb 01       	movw	r30, r22
    180a:	e1 58       	subi	r30, 0x81	; 129
    180c:	ff 4f       	sbci	r31, 0xFF	; 255
    180e:	d8 01       	movw	r26, r16
    1810:	c7 01       	movw	r24, r14
    1812:	8f 77       	andi	r24, 0x7F	; 127
    1814:	90 70       	andi	r25, 0x00	; 0
    1816:	a0 70       	andi	r26, 0x00	; 0
    1818:	b0 70       	andi	r27, 0x00	; 0
    181a:	80 34       	cpi	r24, 0x40	; 64
    181c:	91 05       	cpc	r25, r1
    181e:	a1 05       	cpc	r26, r1
    1820:	b1 05       	cpc	r27, r1
    1822:	39 f4       	brne	.+14     	; 0x1832 <__pack_f+0x144>
    1824:	e7 fe       	sbrs	r14, 7
    1826:	0d c0       	rjmp	.+26     	; 0x1842 <__pack_f+0x154>
    1828:	80 e4       	ldi	r24, 0x40	; 64
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	a0 e0       	ldi	r26, 0x00	; 0
    182e:	b0 e0       	ldi	r27, 0x00	; 0
    1830:	04 c0       	rjmp	.+8      	; 0x183a <__pack_f+0x14c>
    1832:	8f e3       	ldi	r24, 0x3F	; 63
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	a0 e0       	ldi	r26, 0x00	; 0
    1838:	b0 e0       	ldi	r27, 0x00	; 0
    183a:	e8 0e       	add	r14, r24
    183c:	f9 1e       	adc	r15, r25
    183e:	0a 1f       	adc	r16, r26
    1840:	1b 1f       	adc	r17, r27
    1842:	17 ff       	sbrs	r17, 7
    1844:	05 c0       	rjmp	.+10     	; 0x1850 <__pack_f+0x162>
    1846:	16 95       	lsr	r17
    1848:	07 95       	ror	r16
    184a:	f7 94       	ror	r15
    184c:	e7 94       	ror	r14
    184e:	31 96       	adiw	r30, 0x01	; 1
    1850:	87 e0       	ldi	r24, 0x07	; 7
    1852:	16 95       	lsr	r17
    1854:	07 95       	ror	r16
    1856:	f7 94       	ror	r15
    1858:	e7 94       	ror	r14
    185a:	8a 95       	dec	r24
    185c:	d1 f7       	brne	.-12     	; 0x1852 <__pack_f+0x164>
    185e:	05 c0       	rjmp	.+10     	; 0x186a <__pack_f+0x17c>
    1860:	ee 24       	eor	r14, r14
    1862:	ff 24       	eor	r15, r15
    1864:	87 01       	movw	r16, r14
    1866:	ef ef       	ldi	r30, 0xFF	; 255
    1868:	f0 e0       	ldi	r31, 0x00	; 0
    186a:	6e 2f       	mov	r22, r30
    186c:	67 95       	ror	r22
    186e:	66 27       	eor	r22, r22
    1870:	67 95       	ror	r22
    1872:	90 2f       	mov	r25, r16
    1874:	9f 77       	andi	r25, 0x7F	; 127
    1876:	d7 94       	ror	r13
    1878:	dd 24       	eor	r13, r13
    187a:	d7 94       	ror	r13
    187c:	8e 2f       	mov	r24, r30
    187e:	86 95       	lsr	r24
    1880:	49 2f       	mov	r20, r25
    1882:	46 2b       	or	r20, r22
    1884:	58 2f       	mov	r21, r24
    1886:	5d 29       	or	r21, r13
    1888:	b7 01       	movw	r22, r14
    188a:	ca 01       	movw	r24, r20
    188c:	1f 91       	pop	r17
    188e:	0f 91       	pop	r16
    1890:	ff 90       	pop	r15
    1892:	ef 90       	pop	r14
    1894:	df 90       	pop	r13
    1896:	08 95       	ret

00001898 <__unpack_f>:
    1898:	fc 01       	movw	r30, r24
    189a:	db 01       	movw	r26, r22
    189c:	40 81       	ld	r20, Z
    189e:	51 81       	ldd	r21, Z+1	; 0x01
    18a0:	22 81       	ldd	r18, Z+2	; 0x02
    18a2:	62 2f       	mov	r22, r18
    18a4:	6f 77       	andi	r22, 0x7F	; 127
    18a6:	70 e0       	ldi	r23, 0x00	; 0
    18a8:	22 1f       	adc	r18, r18
    18aa:	22 27       	eor	r18, r18
    18ac:	22 1f       	adc	r18, r18
    18ae:	93 81       	ldd	r25, Z+3	; 0x03
    18b0:	89 2f       	mov	r24, r25
    18b2:	88 0f       	add	r24, r24
    18b4:	82 2b       	or	r24, r18
    18b6:	28 2f       	mov	r18, r24
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	99 1f       	adc	r25, r25
    18bc:	99 27       	eor	r25, r25
    18be:	99 1f       	adc	r25, r25
    18c0:	11 96       	adiw	r26, 0x01	; 1
    18c2:	9c 93       	st	X, r25
    18c4:	11 97       	sbiw	r26, 0x01	; 1
    18c6:	21 15       	cp	r18, r1
    18c8:	31 05       	cpc	r19, r1
    18ca:	a9 f5       	brne	.+106    	; 0x1936 <__unpack_f+0x9e>
    18cc:	41 15       	cp	r20, r1
    18ce:	51 05       	cpc	r21, r1
    18d0:	61 05       	cpc	r22, r1
    18d2:	71 05       	cpc	r23, r1
    18d4:	11 f4       	brne	.+4      	; 0x18da <__unpack_f+0x42>
    18d6:	82 e0       	ldi	r24, 0x02	; 2
    18d8:	37 c0       	rjmp	.+110    	; 0x1948 <__unpack_f+0xb0>
    18da:	82 e8       	ldi	r24, 0x82	; 130
    18dc:	9f ef       	ldi	r25, 0xFF	; 255
    18de:	13 96       	adiw	r26, 0x03	; 3
    18e0:	9c 93       	st	X, r25
    18e2:	8e 93       	st	-X, r24
    18e4:	12 97       	sbiw	r26, 0x02	; 2
    18e6:	9a 01       	movw	r18, r20
    18e8:	ab 01       	movw	r20, r22
    18ea:	67 e0       	ldi	r22, 0x07	; 7
    18ec:	22 0f       	add	r18, r18
    18ee:	33 1f       	adc	r19, r19
    18f0:	44 1f       	adc	r20, r20
    18f2:	55 1f       	adc	r21, r21
    18f4:	6a 95       	dec	r22
    18f6:	d1 f7       	brne	.-12     	; 0x18ec <__unpack_f+0x54>
    18f8:	83 e0       	ldi	r24, 0x03	; 3
    18fa:	8c 93       	st	X, r24
    18fc:	0d c0       	rjmp	.+26     	; 0x1918 <__unpack_f+0x80>
    18fe:	22 0f       	add	r18, r18
    1900:	33 1f       	adc	r19, r19
    1902:	44 1f       	adc	r20, r20
    1904:	55 1f       	adc	r21, r21
    1906:	12 96       	adiw	r26, 0x02	; 2
    1908:	8d 91       	ld	r24, X+
    190a:	9c 91       	ld	r25, X
    190c:	13 97       	sbiw	r26, 0x03	; 3
    190e:	01 97       	sbiw	r24, 0x01	; 1
    1910:	13 96       	adiw	r26, 0x03	; 3
    1912:	9c 93       	st	X, r25
    1914:	8e 93       	st	-X, r24
    1916:	12 97       	sbiw	r26, 0x02	; 2
    1918:	20 30       	cpi	r18, 0x00	; 0
    191a:	80 e0       	ldi	r24, 0x00	; 0
    191c:	38 07       	cpc	r19, r24
    191e:	80 e0       	ldi	r24, 0x00	; 0
    1920:	48 07       	cpc	r20, r24
    1922:	80 e4       	ldi	r24, 0x40	; 64
    1924:	58 07       	cpc	r21, r24
    1926:	58 f3       	brcs	.-42     	; 0x18fe <__unpack_f+0x66>
    1928:	14 96       	adiw	r26, 0x04	; 4
    192a:	2d 93       	st	X+, r18
    192c:	3d 93       	st	X+, r19
    192e:	4d 93       	st	X+, r20
    1930:	5c 93       	st	X, r21
    1932:	17 97       	sbiw	r26, 0x07	; 7
    1934:	08 95       	ret
    1936:	2f 3f       	cpi	r18, 0xFF	; 255
    1938:	31 05       	cpc	r19, r1
    193a:	79 f4       	brne	.+30     	; 0x195a <__unpack_f+0xc2>
    193c:	41 15       	cp	r20, r1
    193e:	51 05       	cpc	r21, r1
    1940:	61 05       	cpc	r22, r1
    1942:	71 05       	cpc	r23, r1
    1944:	19 f4       	brne	.+6      	; 0x194c <__unpack_f+0xb4>
    1946:	84 e0       	ldi	r24, 0x04	; 4
    1948:	8c 93       	st	X, r24
    194a:	08 95       	ret
    194c:	64 ff       	sbrs	r22, 4
    194e:	03 c0       	rjmp	.+6      	; 0x1956 <__unpack_f+0xbe>
    1950:	81 e0       	ldi	r24, 0x01	; 1
    1952:	8c 93       	st	X, r24
    1954:	12 c0       	rjmp	.+36     	; 0x197a <__unpack_f+0xe2>
    1956:	1c 92       	st	X, r1
    1958:	10 c0       	rjmp	.+32     	; 0x197a <__unpack_f+0xe2>
    195a:	2f 57       	subi	r18, 0x7F	; 127
    195c:	30 40       	sbci	r19, 0x00	; 0
    195e:	13 96       	adiw	r26, 0x03	; 3
    1960:	3c 93       	st	X, r19
    1962:	2e 93       	st	-X, r18
    1964:	12 97       	sbiw	r26, 0x02	; 2
    1966:	83 e0       	ldi	r24, 0x03	; 3
    1968:	8c 93       	st	X, r24
    196a:	87 e0       	ldi	r24, 0x07	; 7
    196c:	44 0f       	add	r20, r20
    196e:	55 1f       	adc	r21, r21
    1970:	66 1f       	adc	r22, r22
    1972:	77 1f       	adc	r23, r23
    1974:	8a 95       	dec	r24
    1976:	d1 f7       	brne	.-12     	; 0x196c <__unpack_f+0xd4>
    1978:	70 64       	ori	r23, 0x40	; 64
    197a:	14 96       	adiw	r26, 0x04	; 4
    197c:	4d 93       	st	X+, r20
    197e:	5d 93       	st	X+, r21
    1980:	6d 93       	st	X+, r22
    1982:	7c 93       	st	X, r23
    1984:	17 97       	sbiw	r26, 0x07	; 7
    1986:	08 95       	ret

00001988 <__fpcmp_parts_f>:
    1988:	1f 93       	push	r17
    198a:	dc 01       	movw	r26, r24
    198c:	fb 01       	movw	r30, r22
    198e:	9c 91       	ld	r25, X
    1990:	92 30       	cpi	r25, 0x02	; 2
    1992:	08 f4       	brcc	.+2      	; 0x1996 <__fpcmp_parts_f+0xe>
    1994:	47 c0       	rjmp	.+142    	; 0x1a24 <__fpcmp_parts_f+0x9c>
    1996:	80 81       	ld	r24, Z
    1998:	82 30       	cpi	r24, 0x02	; 2
    199a:	08 f4       	brcc	.+2      	; 0x199e <__fpcmp_parts_f+0x16>
    199c:	43 c0       	rjmp	.+134    	; 0x1a24 <__fpcmp_parts_f+0x9c>
    199e:	94 30       	cpi	r25, 0x04	; 4
    19a0:	51 f4       	brne	.+20     	; 0x19b6 <__fpcmp_parts_f+0x2e>
    19a2:	11 96       	adiw	r26, 0x01	; 1
    19a4:	1c 91       	ld	r17, X
    19a6:	84 30       	cpi	r24, 0x04	; 4
    19a8:	99 f5       	brne	.+102    	; 0x1a10 <__fpcmp_parts_f+0x88>
    19aa:	81 81       	ldd	r24, Z+1	; 0x01
    19ac:	68 2f       	mov	r22, r24
    19ae:	70 e0       	ldi	r23, 0x00	; 0
    19b0:	61 1b       	sub	r22, r17
    19b2:	71 09       	sbc	r23, r1
    19b4:	3f c0       	rjmp	.+126    	; 0x1a34 <__fpcmp_parts_f+0xac>
    19b6:	84 30       	cpi	r24, 0x04	; 4
    19b8:	21 f0       	breq	.+8      	; 0x19c2 <__fpcmp_parts_f+0x3a>
    19ba:	92 30       	cpi	r25, 0x02	; 2
    19bc:	31 f4       	brne	.+12     	; 0x19ca <__fpcmp_parts_f+0x42>
    19be:	82 30       	cpi	r24, 0x02	; 2
    19c0:	b9 f1       	breq	.+110    	; 0x1a30 <__fpcmp_parts_f+0xa8>
    19c2:	81 81       	ldd	r24, Z+1	; 0x01
    19c4:	88 23       	and	r24, r24
    19c6:	89 f1       	breq	.+98     	; 0x1a2a <__fpcmp_parts_f+0xa2>
    19c8:	2d c0       	rjmp	.+90     	; 0x1a24 <__fpcmp_parts_f+0x9c>
    19ca:	11 96       	adiw	r26, 0x01	; 1
    19cc:	1c 91       	ld	r17, X
    19ce:	11 97       	sbiw	r26, 0x01	; 1
    19d0:	82 30       	cpi	r24, 0x02	; 2
    19d2:	f1 f0       	breq	.+60     	; 0x1a10 <__fpcmp_parts_f+0x88>
    19d4:	81 81       	ldd	r24, Z+1	; 0x01
    19d6:	18 17       	cp	r17, r24
    19d8:	d9 f4       	brne	.+54     	; 0x1a10 <__fpcmp_parts_f+0x88>
    19da:	12 96       	adiw	r26, 0x02	; 2
    19dc:	2d 91       	ld	r18, X+
    19de:	3c 91       	ld	r19, X
    19e0:	13 97       	sbiw	r26, 0x03	; 3
    19e2:	82 81       	ldd	r24, Z+2	; 0x02
    19e4:	93 81       	ldd	r25, Z+3	; 0x03
    19e6:	82 17       	cp	r24, r18
    19e8:	93 07       	cpc	r25, r19
    19ea:	94 f0       	brlt	.+36     	; 0x1a10 <__fpcmp_parts_f+0x88>
    19ec:	28 17       	cp	r18, r24
    19ee:	39 07       	cpc	r19, r25
    19f0:	bc f0       	brlt	.+46     	; 0x1a20 <__fpcmp_parts_f+0x98>
    19f2:	14 96       	adiw	r26, 0x04	; 4
    19f4:	8d 91       	ld	r24, X+
    19f6:	9d 91       	ld	r25, X+
    19f8:	0d 90       	ld	r0, X+
    19fa:	bc 91       	ld	r27, X
    19fc:	a0 2d       	mov	r26, r0
    19fe:	24 81       	ldd	r18, Z+4	; 0x04
    1a00:	35 81       	ldd	r19, Z+5	; 0x05
    1a02:	46 81       	ldd	r20, Z+6	; 0x06
    1a04:	57 81       	ldd	r21, Z+7	; 0x07
    1a06:	28 17       	cp	r18, r24
    1a08:	39 07       	cpc	r19, r25
    1a0a:	4a 07       	cpc	r20, r26
    1a0c:	5b 07       	cpc	r21, r27
    1a0e:	18 f4       	brcc	.+6      	; 0x1a16 <__fpcmp_parts_f+0x8e>
    1a10:	11 23       	and	r17, r17
    1a12:	41 f0       	breq	.+16     	; 0x1a24 <__fpcmp_parts_f+0x9c>
    1a14:	0a c0       	rjmp	.+20     	; 0x1a2a <__fpcmp_parts_f+0xa2>
    1a16:	82 17       	cp	r24, r18
    1a18:	93 07       	cpc	r25, r19
    1a1a:	a4 07       	cpc	r26, r20
    1a1c:	b5 07       	cpc	r27, r21
    1a1e:	40 f4       	brcc	.+16     	; 0x1a30 <__fpcmp_parts_f+0xa8>
    1a20:	11 23       	and	r17, r17
    1a22:	19 f0       	breq	.+6      	; 0x1a2a <__fpcmp_parts_f+0xa2>
    1a24:	61 e0       	ldi	r22, 0x01	; 1
    1a26:	70 e0       	ldi	r23, 0x00	; 0
    1a28:	05 c0       	rjmp	.+10     	; 0x1a34 <__fpcmp_parts_f+0xac>
    1a2a:	6f ef       	ldi	r22, 0xFF	; 255
    1a2c:	7f ef       	ldi	r23, 0xFF	; 255
    1a2e:	02 c0       	rjmp	.+4      	; 0x1a34 <__fpcmp_parts_f+0xac>
    1a30:	60 e0       	ldi	r22, 0x00	; 0
    1a32:	70 e0       	ldi	r23, 0x00	; 0
    1a34:	cb 01       	movw	r24, r22
    1a36:	1f 91       	pop	r17
    1a38:	08 95       	ret

00001a3a <__divmodhi4>:
    1a3a:	97 fb       	bst	r25, 7
    1a3c:	09 2e       	mov	r0, r25
    1a3e:	07 26       	eor	r0, r23
    1a40:	0a d0       	rcall	.+20     	; 0x1a56 <__divmodhi4_neg1>
    1a42:	77 fd       	sbrc	r23, 7
    1a44:	04 d0       	rcall	.+8      	; 0x1a4e <__divmodhi4_neg2>
    1a46:	2e d0       	rcall	.+92     	; 0x1aa4 <__udivmodhi4>
    1a48:	06 d0       	rcall	.+12     	; 0x1a56 <__divmodhi4_neg1>
    1a4a:	00 20       	and	r0, r0
    1a4c:	1a f4       	brpl	.+6      	; 0x1a54 <__divmodhi4_exit>

00001a4e <__divmodhi4_neg2>:
    1a4e:	70 95       	com	r23
    1a50:	61 95       	neg	r22
    1a52:	7f 4f       	sbci	r23, 0xFF	; 255

00001a54 <__divmodhi4_exit>:
    1a54:	08 95       	ret

00001a56 <__divmodhi4_neg1>:
    1a56:	f6 f7       	brtc	.-4      	; 0x1a54 <__divmodhi4_exit>
    1a58:	90 95       	com	r25
    1a5a:	81 95       	neg	r24
    1a5c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a5e:	08 95       	ret

00001a60 <__udivmodsi4>:
    1a60:	a1 e2       	ldi	r26, 0x21	; 33
    1a62:	1a 2e       	mov	r1, r26
    1a64:	aa 1b       	sub	r26, r26
    1a66:	bb 1b       	sub	r27, r27
    1a68:	fd 01       	movw	r30, r26
    1a6a:	0d c0       	rjmp	.+26     	; 0x1a86 <__udivmodsi4_ep>

00001a6c <__udivmodsi4_loop>:
    1a6c:	aa 1f       	adc	r26, r26
    1a6e:	bb 1f       	adc	r27, r27
    1a70:	ee 1f       	adc	r30, r30
    1a72:	ff 1f       	adc	r31, r31
    1a74:	a2 17       	cp	r26, r18
    1a76:	b3 07       	cpc	r27, r19
    1a78:	e4 07       	cpc	r30, r20
    1a7a:	f5 07       	cpc	r31, r21
    1a7c:	20 f0       	brcs	.+8      	; 0x1a86 <__udivmodsi4_ep>
    1a7e:	a2 1b       	sub	r26, r18
    1a80:	b3 0b       	sbc	r27, r19
    1a82:	e4 0b       	sbc	r30, r20
    1a84:	f5 0b       	sbc	r31, r21

00001a86 <__udivmodsi4_ep>:
    1a86:	66 1f       	adc	r22, r22
    1a88:	77 1f       	adc	r23, r23
    1a8a:	88 1f       	adc	r24, r24
    1a8c:	99 1f       	adc	r25, r25
    1a8e:	1a 94       	dec	r1
    1a90:	69 f7       	brne	.-38     	; 0x1a6c <__udivmodsi4_loop>
    1a92:	60 95       	com	r22
    1a94:	70 95       	com	r23
    1a96:	80 95       	com	r24
    1a98:	90 95       	com	r25
    1a9a:	9b 01       	movw	r18, r22
    1a9c:	ac 01       	movw	r20, r24
    1a9e:	bd 01       	movw	r22, r26
    1aa0:	cf 01       	movw	r24, r30
    1aa2:	08 95       	ret

00001aa4 <__udivmodhi4>:
    1aa4:	aa 1b       	sub	r26, r26
    1aa6:	bb 1b       	sub	r27, r27
    1aa8:	51 e1       	ldi	r21, 0x11	; 17
    1aaa:	07 c0       	rjmp	.+14     	; 0x1aba <__udivmodhi4_ep>

00001aac <__udivmodhi4_loop>:
    1aac:	aa 1f       	adc	r26, r26
    1aae:	bb 1f       	adc	r27, r27
    1ab0:	a6 17       	cp	r26, r22
    1ab2:	b7 07       	cpc	r27, r23
    1ab4:	10 f0       	brcs	.+4      	; 0x1aba <__udivmodhi4_ep>
    1ab6:	a6 1b       	sub	r26, r22
    1ab8:	b7 0b       	sbc	r27, r23

00001aba <__udivmodhi4_ep>:
    1aba:	88 1f       	adc	r24, r24
    1abc:	99 1f       	adc	r25, r25
    1abe:	5a 95       	dec	r21
    1ac0:	a9 f7       	brne	.-22     	; 0x1aac <__udivmodhi4_loop>
    1ac2:	80 95       	com	r24
    1ac4:	90 95       	com	r25
    1ac6:	bc 01       	movw	r22, r24
    1ac8:	cd 01       	movw	r24, r26
    1aca:	08 95       	ret

00001acc <__prologue_saves__>:
    1acc:	2f 92       	push	r2
    1ace:	3f 92       	push	r3
    1ad0:	4f 92       	push	r4
    1ad2:	5f 92       	push	r5
    1ad4:	6f 92       	push	r6
    1ad6:	7f 92       	push	r7
    1ad8:	8f 92       	push	r8
    1ada:	9f 92       	push	r9
    1adc:	af 92       	push	r10
    1ade:	bf 92       	push	r11
    1ae0:	cf 92       	push	r12
    1ae2:	df 92       	push	r13
    1ae4:	ef 92       	push	r14
    1ae6:	ff 92       	push	r15
    1ae8:	0f 93       	push	r16
    1aea:	1f 93       	push	r17
    1aec:	cf 93       	push	r28
    1aee:	df 93       	push	r29
    1af0:	cd b7       	in	r28, 0x3d	; 61
    1af2:	de b7       	in	r29, 0x3e	; 62
    1af4:	ca 1b       	sub	r28, r26
    1af6:	db 0b       	sbc	r29, r27
    1af8:	0f b6       	in	r0, 0x3f	; 63
    1afa:	f8 94       	cli
    1afc:	de bf       	out	0x3e, r29	; 62
    1afe:	0f be       	out	0x3f, r0	; 63
    1b00:	cd bf       	out	0x3d, r28	; 61
    1b02:	09 94       	ijmp

00001b04 <__epilogue_restores__>:
    1b04:	2a 88       	ldd	r2, Y+18	; 0x12
    1b06:	39 88       	ldd	r3, Y+17	; 0x11
    1b08:	48 88       	ldd	r4, Y+16	; 0x10
    1b0a:	5f 84       	ldd	r5, Y+15	; 0x0f
    1b0c:	6e 84       	ldd	r6, Y+14	; 0x0e
    1b0e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1b10:	8c 84       	ldd	r8, Y+12	; 0x0c
    1b12:	9b 84       	ldd	r9, Y+11	; 0x0b
    1b14:	aa 84       	ldd	r10, Y+10	; 0x0a
    1b16:	b9 84       	ldd	r11, Y+9	; 0x09
    1b18:	c8 84       	ldd	r12, Y+8	; 0x08
    1b1a:	df 80       	ldd	r13, Y+7	; 0x07
    1b1c:	ee 80       	ldd	r14, Y+6	; 0x06
    1b1e:	fd 80       	ldd	r15, Y+5	; 0x05
    1b20:	0c 81       	ldd	r16, Y+4	; 0x04
    1b22:	1b 81       	ldd	r17, Y+3	; 0x03
    1b24:	aa 81       	ldd	r26, Y+2	; 0x02
    1b26:	b9 81       	ldd	r27, Y+1	; 0x01
    1b28:	ce 0f       	add	r28, r30
    1b2a:	d1 1d       	adc	r29, r1
    1b2c:	0f b6       	in	r0, 0x3f	; 63
    1b2e:	f8 94       	cli
    1b30:	de bf       	out	0x3e, r29	; 62
    1b32:	0f be       	out	0x3f, r0	; 63
    1b34:	cd bf       	out	0x3d, r28	; 61
    1b36:	ed 01       	movw	r28, r26
    1b38:	08 95       	ret

00001b3a <__tablejump2__>:
    1b3a:	ee 0f       	add	r30, r30
    1b3c:	ff 1f       	adc	r31, r31

00001b3e <__tablejump__>:
    1b3e:	05 90       	lpm	r0, Z+
    1b40:	f4 91       	lpm	r31, Z+
    1b42:	e0 2d       	mov	r30, r0
    1b44:	09 94       	ijmp

00001b46 <_exit>:
    1b46:	f8 94       	cli

00001b48 <__stop_program>:
    1b48:	ff cf       	rjmp	.-2      	; 0x1b48 <__stop_program>
